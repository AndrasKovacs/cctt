
Parameterized HITs

Signature:    (fibrant-only) parameters, list of constructors
Constructor:  telescope with mixed I-s and fibrant types (under params)
              + system with component type exactly (Sort params)
HCom:         trivial, returns FHCom (which is canonical!)
Coercion:
  - A boundary is coherent iff it contains no elimination (app, papp, lapp, proj, case)
  - Coherent coercion is the same as indtype coercion
  - Incoherent coercion:
    - coerce fields as usual, accummulate the line env + isub
    - evaluate boundary in the line env. This coeFill-s all
      field vars, from "r" to "i". The coe from "i" to "r'" each component
      on the outside.

      con fs : A ps [α. t]

      coe r r' (i. A (ps i)) (con fs) =
      hcom r r' (A (ps r')) [⟦α⟧ i. coe i r' (j. A (ps j)) ⟦t⟧] (con (coe fs))

QUESTION:
  - recompute boundary from syntax on every forcing, or store the boundary?
  - kinda bad either way
    1. recompute. Then we have to store Tm typarams, which will be normalized
       due to bidirectional checking. TODO: allow explicit param notation.
    2. store. Then we have to store the normalized boundary, again due to
       bidirectional checking. In coercion we get the typaram filler from the coe type arg,
       so we don't have to store typarams in HDCon.

    In any case, coercion *must* recompute the boundary, because we need a
    filler for the boundary adjustment.

    WAIT A MINUTE
    BOUNDARY FORCING ONLY REQUIRES COMPUTING THE COFS!
    THAT MAKES FALSE POSITIVE FORCING HELLA CHEAP

    Let's go with option 1.
    We'd like to evaluate boundary components lazily.
    We don't need the NeSys part of the VSys result. TODO: specialize evalSys to not return NeSys.
    let's call it evalBoundary.

------------------------------------------------------------

higher inductive S1 := base | loop (i : I)[i=0. base; i=1.base];

higher inductive SetTrunc (A : U) :=
    SEmbed A
  | STrunc (x y : SetTrunc A)(p q : x = y) (i j : I)[i=0. p j; i=1. q j];

(\i j. STrunc x y p q i j) : p = q


Tm
- HTyCon HTyConInfo TyParams
- HDCon HDConInfo HDSpine

Val
- VHTyCon HTyConInfo Env
- VHDCon HDConInfo VHDSpine IVarSet    (similar to GlueTy, neutral but not in Ne!

- Case and Split are reused.
- FHCom is not distinguished from ordinary Tm/Ne HCom
  - We can always just look at the base type

Don't forget action of coe on fhcom!

------------------------------------------------------------

Case elaboration:

   case t (x. B) [
     con fs. rhs
   ]

- lookup arg telescope of fs

- starting from typarams env, push field vars to cxt, create LHS val, check rhs with
  B (rhsVal)

  (almost the same as with indtypes up to this point)

- lookup syntactic con boundary, evaluate it in paramEnv + idSub
  during eval, apply (case _ (x. B) prevcases) to  each boundary component, where
  (prevcases) are the previously checked cases.

- Check compatibility of rhs with the evaluated boundary system

Case evaluation:

- action on constructors exactly the same as in indtypes

- fhcom:
  case _ (x.B x) cases : (x : A ps) → B x

  base        : A ps
  whole thing : B (fhcom ...)

  case base B cases        : B base
  α i ⊢ case (t i) B cases : B (t i)

  Case (fhcom r r' (A ps) [α i. t i] base) (x. B x) cases =

  com r r' (i. B (fhcom r i (A ps) [α i. t i] base)) [α i. case (t i) B cases]
                                                     (case base B cases) =

  let B* = λ i. B (fhcom r i (A ps) [α j. t j] base);
  hcom r r' (B* r')
            [α i. coe i r' B* (case (t i) B cases)]
	    (coe r r' B* (case base B cases))

HDCon evaluation:
  - eval fields, push field values to paramenv + sub
  - eval boundary in paramenv + sub
     - total: return val
     - neutral: return neutral
