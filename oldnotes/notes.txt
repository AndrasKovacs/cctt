
- stable val: stable under isub, stores an isub
- unstable val: can compute under isub, stores an isub + a cof s.t. the if it's true, the
  value may compute

- eval: goes from syntax to vals. Computes eagerly under interval binder, only stops when it hits
  a value binder. When evaluating an unstable term, we -∨- recursive unstable cof-s in the result.

- forcing: goes from vals to vals. Computes the head w.r.t. an isub.

  - forcing a stable val composes the stored isub with the new one
  - forcing an unstable val:
    - if cof holds under new isub, we force the value
    - otherwise we compose the stored isub and store the updated cof

Alternative:

  - We only mark in values whether something is stable or unstable, but not the cof.
    Forcing an unstable thing always walks the value. Simpler but maybe less efficient.

----------------------------------------------------------------------------------------------------

isEquiv : (A → B) → U
isEquiv f :=
    (f⁻¹  : B → A)
  × (linv : ∀ a → a = f⁻¹ (f a))
  × (rinv : ∀ b → f (f⁻¹ b) = b)
  × (coh  : ∀ a →
            PathP i (f (linv a i) = f a) (refl (f a)) (rinv (f a)))

     refl       : f a = f a
     rinv (f a) : f (f⁻¹ (f a)) = f a

    -- without PathP
    ap f (inv a) ◼ rinv (f a) = refl

   with extension type:
    [i, j] B [i=0 ↦ f a, i=1 ↦ rinv (f a) j, j=0 ↦ f (linv a i), j=1 ↦ f a]

   as a square:

                           refl
              f a --------------------- f a
               |                         |
  f (linv a i) |                         | refl
               |                         |
         f (f⁻¹ (f a))----------------- f a
                         rinv (f a)

--------------------------------------------------------------------------------

isEquiv id
  _⁻¹  = λ a. a
  linv = λ a i. a
  rinv = λ b i. b
  coh  = λ a i j. a

isEquiv (coeⁱ r r' A : Ar → Ar')
  _⁻¹ = coeⁱ r' r A

  linvFill : ∀ s a → a = coeⁱ s r A (coeⁱ r s A a)
  linvFill s a = λ j. hcomᵏ r s (A r) [j=0 ↦ a, j=1 ↦ coeⁱ k r A (coeⁱ r k A a)] a

  linv := linvFill r'

  rinvFill : ∀ s b → coeⁱ s r' A (coeⁱ r' s A b) = b
  rinvFill s b = λ j. hcomᵏ r' s (A r') [j=0 ↦ coeⁱ k r' A (coeⁱ r' k A b), j=1 ↦ b] b

  rinv := rinvFill r

  coh : ∀ a → PathPⁱ (f (linv a i) = f a)
                     (refl (f a)) (rinv (f a)))

  coh = TODO -- use transport to go from "hasCoh idIso" to "hasCoh (coeIso r r')"


-- we get degenerate coe by coe isEquivId
isEquiv (coeⁱ r r' A : Ar → Ar')

        isEquivId : isEquiv (id : Ar → Ar)

  coeʲ r r' (isEquiv (coeⁱ r j A)) isEquivId : isEquiv (coeⁱ r r' A)

  coeʲ r r' (Aj → Ar) (λ x. x) = λ (ar' : Ar'). coeʲ r r' (Ar) (coeʲ r' r (Aj) ar')

  -- coe f = λ x. coe (f (coe x))

-- but we can try to coe just some components (e.g. just the coh component!)
isEquiv (coeⁱ r r' A : Ar → Ar')
   _⁻¹ = coeⁱ r' r A

   isEquivIdId : isEquiv' id id
   goal        : isEquiv' (coeⁱ r r' A) (coeⁱ r' r A)

   coeʲ r r' (isEquiv' (coeⁱ r j A) (coeⁱ j r A)) isEquivIdId : isEquiv' (coeⁱ r r' A) (coeⁱ r' r A)

--------------------------------------------------------------------------------

-- digression: coeFill notation:
Γ,i ⊢ coeFillⁱ r A t : A
Γ ⊢ (coeFillⁱ r A t)[r/i] = t
Γ ⊢ (coeFillⁱ r A t)[r'/i] = coeⁱ r r' A t


-- Coe Glue with half-adjoint equivalences
----------------------------------------------------------------------

coeⁱ r r' (Glue [α ↦ (T, f)] A) gr

  ar' := compⁱ r r' A [∀i.α ↦ f (coeFillⁱ r T gr)] (unglue gr)

  fib* : αr' ⊢ (tr' : Tr') × (fr' tr' = ar')
  fib* = (fr'⁻¹ ar', fr'.rinv ar')

  (topt, fr'topt≡ar') : αr' ⊢ fib fr' ar'
  (topt, fr'topt≡ar') = hcompⁱ 1 0 (fib fr' ar')
     [ ∀i.α ↦ (fr'.linv (coeⁱ r r' T gr) i, fr'.coh (coeⁱ r r' T gr) i)
     , r=r' ↦ (fr'.linv gr i, fr'.coh gr i)
     ] fib*

  Res = glue (hcompⁱ 1 0 Ar' [αr' ↦ fr'topt≡ar' i, r=r' ↦ unglue gr] ar')
             [αr' ↦ topt]


-- Unfolding hcom over fiber
----------------------------------------------------------------------

hcom r r' ((x : A) * f x = y) [α i. t i] b =
  ( hcom r r' A [α i. (t i).1] b.1
  , λ j. hcom r r' B [j=0 i. f (hcom r i A [α k. (t k).1] b.1)
                     ;j=1 i. y
                     ;α i. (t i).2 j]
                     (b.2 j))


-- hcom for Glue
--------------------------------------------------------------------------------

hcom r r' (Glue [α. (T, f)] A) [β i. t i] gr

  goal : (Glue [α. (T, f)] A) [β ↦ t r']

  gr        : Glue [α. (T, f)] A
  unglue gr : A [ α ↦ f gr ]

  :=
  glue (hcom r r' A [β i. unglue (t i); α i. f (hcom r i T [β. t] gr)] (unglue gr))
       [α. hcom r r' T [β. t] gr]


-- With contr fibers
--------------------------------------------------------------------------------
coeⁱ r r' (Glue [α ↦ (T, f)] A) gr

  ar' := compⁱ r r' [∀i.α ↦ f (coeFillⁱ r r' T gr)] (unglue gr)

  (fib*, contr) : αr' ⊢ isContr (fib fr' ar')
  (fib*, contr) = fr' .isEquiv ar'

  (topt, fr'topt≡ar') : αr' ⊢ fib fr' ar'
  (topt, fr'topt≡ar') = hcompⁱ 0 1 (fib fr' ar')
     [ ∀i.α ↦ contr (coeⁱ r r' T gr, refl (fr' _)) i
     , r=r' ↦ contr (gr, refl (fr' _)) i
     ] fib*

  Res =
    glue [αr' ↦ topt]
         (hcompⁱ 1 0 Ar'
            [ αr'  ↦ fr'topt≡ar' i
            , r=r' ↦ unglue gr] ar')


-- isEquiv coe attempt
--------------------------------------------------------------------------------

isEquiv : (A B : U) → (A → B) → U
isEquiv A B f :=
    (g    : B → A)
  × (linv : (x : A) → x = g (f x)
  × (rinv : (x : B) → f (g x) = x
  × (coh  : (x : A) → refl (f x) ={i. f (linv x i) = f x} rinv (f x)

isEquivCoe : (A : I → U)(r r' : I) → isEquiv (λ x. coe r r' A x)
isEquivCoe A r r' =
  g    := λ x. coe r' r A x
  linv := λ x j. hcom r r' (A r)  [j=0 k. x; j=1 k. coe k r A (coe r k A x)] x
  rinv := λ x j. hcom r' r (A r') [j=0 k. coe k r' A (coe r' k A x); j=1 k. x] x
  coh  := TODO

One way is to coerce the identity equivalence:

isEquivId : isEquiv A A (λ x. x) =
  g    := λ x. x
  linv := λ x j. x
  rinv := λ x j. x
  coh  := λ x j k. x

isEquivCoe : isEquiv (A r) (A r') (λ x. coe r r' A x) :=
  coe r r' (i. isEquiv (A r) (A i) (λ x. coe r i A x)) (isEquivId (A r))

isCoherent
  (f    : A → B)
  (g    : B → A)
  (linv : (x : A) → x = g (f x))
  (rinv : (x : B) → f (g x) = x)
  := ((x : A) → refl (f x) ={l. f (linv x l) = f x} rinv (f x))



isCoherentId : isCoherent (λ x. x) (λ x. x) (λ x j. x) (λ x j. x) := λ x j k. x

reminder: coe Pi
  coe r r' (i. (x : A i) → B i x) f
    = λ x. coe r r' (i. B i (coe r' i A x)) (f (coe r' r A x))

with constant domain:
  coe r r' (i. (x : A) → B i x) f
    = λ x. coe r r' (i. B i x) (f x)

isCoherentCoe :
  isCoherent (λ x. coe r r' A x)
             (λ x. coe r' r A x)
             (λ x j. hcom r r' (A r)  [j=0 k. x; j=1 k. coe k r A (coe r k A x)] x)
             (λ x j. hcom r' r (A r') [j=0 k. coe k r' A (coe r' k A x); j=1 k. x] x)
  :=
  coe r r'
    (i. isCoherent
           f=    (λ x. coe r i A x)
           g=    (λ x. coe i r A x)
           linv= (λ x j. hcom r i (A r)  [j=0 k. x; j=1 k. coe k r A (coe r k A x)] x)
           rinv= (λ x j. hcom i r (A i) [j=0 k. coe k i A (coe i k A x); j=1 k. x] x))
    (λ x j k. x)

  coe r r'
    (i. (x : A r) → refl (f x) ={l. f (linv x l) = f x} rinv (f x))
    (λ x j k. x)

  λ x. coe r r'
    (i. refl (f x) ={l. f (linv x l) = f x} (rinv (f x)))
    (λ j k. x)

  λ x l. com r r'
    (i. f (linv x l) ={_. A i} f x)
    [l=0 i. refl (f x); l=1 i. rinv (f x)]
    (λ k. x)

  --------------------------------------------------------------------------------

  metatheoretic shorthands:
    fⁱ x      := coe r i A x
    gⁱ x      := coe i r A x
    linvⁱ x j := hcom r i (A r) [j=0 k. x; j=1 k. coe k r A (coe r k A x)] x
    rinvⁱ x j := hcom i r (A i) [j=0 k. coe k i A (coe i k A x); j=1 k. x] x

  coh := λ x l k. com r r' (i. A i)
                       [k=0 i. fⁱ (linvⁱ x l)
		      ; k=1 i. fⁱ x
		      ; l=0 i. fⁱ x
		      ; l=1 i. rinvⁱ (fⁱ x) k]
		      x

  Check:
  Base compat:
    fʳ (linvʳ x l) = x OK
    fʳ x = x OK
    fʳ x = x OK
    rinvʳ (fʳ x) k = x OK

  System compat:
    l=0,k=0 ⊢ fⁱ (linvⁱ x l) = fⁱ x OK
    l=0,k=1 ⊢ fⁱ x = fⁱ x OK
    l=1,k=0 ⊢ rinvⁱ (fⁱ x) k = rinvⁱ (fⁱ x) 0 =  coe r i A (coe i r A (coe r i A x))
              fⁱ (linvⁱ x l) = fⁱ (linvⁱ x 1) = fⁱ (coe i r A (coe r i A x))
	        = coe r i A (coe i r A (coe r i A x) OK
    l=1,k=1 ⊢ rinvⁱ (fⁱ x) k = rinvⁱ (fⁱ x) 1 = fⁱ x
              fⁱ x = fⁱ x OK

  Top boundary: OK



  --------------------------------------------------------------------------------


-- dependent path coe
coe r r' (i. t i ={j. A i j} u i) p =
  λ j. com r r' (i. A i j) [j=0 i. t i; j=1 i. u i] (p j)

-- non-dependent path coe is the same...
coe r r' (i. t i ={A i} u i} p =
  λ j. com r r' A [j=0 i. t i; j=1 i. u i] (p j)

-- dependent path com
com r r' (i. left i ={j. A i j} right i) [α i. t i] p =
  λ j. com r r' (i. A i j) [j=0 i. left i; j=1 i. right i; α i. t i j] (p j)




--------------------------------------------------------------------------------
