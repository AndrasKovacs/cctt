
import basics;

inductive Bool := false | true;

falseNeqTrue : not (false = true) :=
  λ p. coe 0 1 (i. case (p i) [false. Top; true. Bot]) tt;

trueNeqFalse : not (true = false) :=
  λ p. coe 0 1 (i. case (p i) [false. Bot; true. Top]) tt;

boolDec : (b1 b2 : Bool) → Dec (b1 = b2) := λ[
  false. λ[false. left  refl        ; true. right falseNeqTrue];
  true.  λ[false. right trueNeqFalse; true. left  refl        ]
  ];

negBool : Bool → Bool := λ[false. true; true. false];

negIso : iso Bool Bool :=
    negBool
  , negBool
  , λ[false. refl; true. refl]
  , λ[false. refl; true. refl];

negEq : Bool = Bool :=
  ua Bool Bool (isoToEquiv Bool Bool negIso);

comp (A : U)(x y z : A)(p : x = y)(q : y = z) := p ∙ q;

inductive Nat := zero | suc Nat;

nsym (A : U)(x : A)(p : x = x)(n : Nat) : x = x :=
  case n [zero. p; suc n. nsym A x p⁻¹ n];

n5 := suc (suc (suc (suc (suc zero))));

add (n m : Nat) : Nat := case n [
  zero. m;
  suc n. suc (add n m)];

n10 := add n5 n5;
n15 := add n10 n5;
n20 := add n10 n10;

ncomp (p : Bool = Bool) (n : Nat) : Bool = Bool := case n [
  zero. p;
  suc n. p ∙ ncomp p n];

bigpath := negEq ∙ negEq ∙ negEq ∙
           negEq ∙ negEq ∙ negEq ∙
	   negEq ∙ negEq ∙ negEq ∙
	   negEq ∙ negEq;

test := coe 0 1 bigpath false;
