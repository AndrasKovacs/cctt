
-- Adapted from
-- https://github.com/agda/cubical/blob/56363ae66898ad65d44795b6b474e0cbd964caa9/Cubical/Homotopy/Group/Pi4S3/NewBrunerieNumbers.agda

-- Basics
----------------------------------------------------------------------------------------------------

isContr (A : U) : U := (x : A) × ((y : A) → x = y);
isProp (A : U) : U := (a b : A) → a = b;
isSet (A : U) : U := (a b : A) → isProp (a = b);
isGroupoid (A : U) : U := (a b : A) → isSet (a = b);
is2Groupoid (A : U) : U := (a b : A) → isGroupoid (a = b);

the (A : U)(x : A) := x;

J (A : U) (a : A) (C : (x : A) → a = x → U) (d : C a (λ _. a))(x : A) (p : a = x) : C x p
  := let sq (i j : I) : A := hcom 0 j [i=0 _. a; i=1. p] a;
     coe 0 1 (i. C (sq i 1) (λ j. sq i j)) d;

propSet : (A : U) (h : isProp A) → isSet A
  := λ A h a b p q j i.
  hcom 0 1 A [i=0. h a a;
              i=1. h a b;
              j=0. h a (p i);
              j=1. h a (q i)] a;

isEquiv (A B : U)(f : A → B) : U :=
    (g    : B → A)
  × (linv : (x : A) → x = g (f x))
  × (rinv : (x : B) → f (g x) = x)
  × (coh  : (x : A) → refl ={i. f (linv x i) = f x} (rinv (f x)));

equiv (A B : U) : U :=
  (f : A → B) × isEquiv A B f;

isPropIsEquiv (A B : U) (f : A → B) : isProp (isEquiv A B f) := ?_;

idEquiv (A : U) : equiv A A :=
  (λ x. x, λ x. x, λ x _. x, λ x _. x, λ x _ _. x);

ua (A B : U)(f : equiv A B) : A = B :=
  λ i. Glue B [i=0. (A, f); i=1. (B, idEquiv B)];

isIso (A B : U)(f : A → B) : U :=
    (g    : B → A)
  × (linv : (x : A) → x = g (f x))
  × (rinv : (x : B) → f (g x) = x);

iso (A B : U) : U := (f : A → B) × isIso A B f;

isoToEquiv (A B : U)(iso : iso A B) : equiv A B :=
    iso.f
  , iso.g
  , iso.linv
  , ?_
  , ?_;

-- Decidability
----------------------------------------------------------------------------------------------------

inductive or (A B : U) := left (a : A) | right (b : B);

inductive Unit := tt;

inductive N0 :=;

not (A : U) : U := A → N0;

dec (A : U) : U := or A (not A);

subst (A : U) (P : A → U) (a b : A) (p : a = b) (e : P a) : P b
  := coe 0 1 (ap P p) e;

discrete (A : U) : U := (a b : A) → dec (a = b);

-- Integers
----------------------------------------------------------------------------------------------------

inductive nat := zero | suc nat;

pred : nat → nat := λ[
  zero. zero;
  suc n. n];

inductive Z := pos nat | neg nat;

zeroZ := pos zero;

predZ : Z → Z := λ[
  pos u. case u [zero. neg zero; suc n. pos n];
  neg v. neg (suc v)];

sucZ : Z → Z := λ[
  pos u. pos (suc u);
  neg v. case v [zero. pos zero; suc n. neg n]];

predsucZ : (x : Z) → x = predZ (sucZ x) := λ[
  pos u. refl;
  neg v. case v (v. neg v = predZ (sucZ (neg v))) [
    zero. refl;
    suc n. refl
    ]
  ];

sucpredZ : (x : Z) → sucZ (predZ x) = x := λ[
  pos u. case u (u. sucZ (predZ (pos u)) = pos u) [
    zero.  refl;
    suc n. refl
    ];
  neg v. refl
  ];

caseNat (A : U) (x y : A) : nat → A := λ[
  zero.  x;
  suc _. y];

caseDNat (P : nat → U) (z : P zero) (s : (n : nat) → P (suc n)) : (n : nat) → P n := λ[
  zero. z;
  suc n. s n];

znots (n : nat) : not (zero = suc n) :=
  λ h. subst nat (caseNat U nat N0) zero (suc n) h zero;

discreteNat : discrete nat := λ[
  zero.  λ[zero.  left refl;
           suc m. right (λ p. case (znots m p) [])];
  suc n. λ[zero.  right (λ p. case (znots n p⁻¹) []);
           suc m. case (discreteNat n m) [
	     left p. left (ap (λ x. suc x) p);
	     right p. right (λ q. case (p (ap pred q)) [])
	   ]]
  ];

posNotneg (a b : nat) : not (pos a = neg b) :=
  λ h. subst Z (λ[pos _. Unit; neg _. N0]) (pos a) (neg b) h tt;

injPos (a b : nat) (h : pos a = pos b) : a = b :=
  subst Z (λ[pos c. a = c; neg _. N0]) (pos a) (pos b) h refl;

injNeg (a b : nat) (h : neg a = neg b) : a = b :=
  subst Z (λ[pos _. N0; neg c. a = c]) (neg a) (neg b) h refl;

discreteZ : discrete Z := λ[
  pos a. λ[
    pos a'. case (discreteNat a a') [
      left p. left (ap (λ x. pos x) p);
      right p. right (λ q. p (injPos a a' q))
      ];
    neg b. right (λ p. case (posNotneg a b p) [])
    ];
  neg b. λ[
    pos a. right (λ p. case (posNotneg a b p⁻¹) []);
    neg b'. case (discreteNat b b') [
      left p. left (ap (λ x. neg x) p);
      right p. right (λ q. p (injNeg b b' q))
      ]
    ]
];

sucZIso : iso Z Z :=
    λ x. sucZ x
  , λ x. predZ x
  , predsucZ
  , sucpredZ;

-- OR: use the hSet-ness of Z to define the equivalence

sucPathZ : Z = Z :=
  ua Z Z (isoToEquiv Z Z sucZIso);


-- H-levels
----------------------------------------------------------------------------------------------------

transport (A : I → U) (x : A 0) : A 1 := coe 0 1 A x;

toPathP (A : I → U)(x : A 0)(y : A 1)(p : transport A x = y) : x ={i. A i} y :=
  λ i. hcom 0 1 [i=0 _. x; i=1 j. p j] (coe 0 i A x);

HLevel := nat;

isContr-isProp : (A : U) → isContr A → isProp A :=
  λ A cA a b. (cA.2 a)⁻¹ ∙ cA.2 b;

isProp-PathP (B : I → U)(hB : (i : I) → isProp (B i))(b0 : B 0)(b1 : B 1) : b0 ={i. B i} b1 :=
  toPathP B b0 b1 (hB 1 (transport B b0) b1);

isProp-isSet : (A : U) → isProp A → isSet A :=
  λ A h a b p q j i.
    hcom 0 1 [i = 0. h a a
             ;i = 1. h a b
	     ;j = 0. h a (p i)
	     ;j = 1. h a (q i)] a;

isOfHLevel (l : HLevel)(A : U) : U := case l [
  zero. isContr A;
  suc l. case l [
    zero.  isProp A;
    suc l. (x y : A) → isOfHLevel (suc l) (x = y)
  ]
];

isProp-isContrPath : (A : U) → isProp A → (x y : A) → isContr (x = y) :=
  λ A h x y. (h x y , isProp-isSet A h x y (h x y));

isContr-isContrPath : (A : U) → isContr A → (x y : A) → isContr (x = y) :=
  λ A cA. isProp-isContrPath A (isContr-isProp A cA);

isOfHLevelPath' : (n : HLevel)(A : U) → isOfHLevel (suc n) A → (x y : A) → isOfHLevel n (x = y) := λ[
  zero. isProp-isContrPath;
  suc n. λ A h x y. h x y
];

isOfHLevelSuc : (n : HLevel)(A : U) → isOfHLevel n A → isOfHLevel (suc n) A := λ[
  zero. isContr-isProp;
  suc n. case n (n. (A : U) → isOfHLevel (suc n) A → isOfHLevel (suc (suc n)) A) [
    zero. isProp-isSet;
    suc n. λ A h a b. isOfHLevelSuc (suc n) (a = b) (h a b)
  ]
];

isOfHLevelPath : (n : HLevel)(A : U) → isOfHLevel n A → (x y : A) → isOfHLevel n (x = y) := λ[
  zero.  λ A h x y. isContr-isContrPath A h x y;
  suc n. λ A h x y. isOfHLevelSuc n (x = y) (isOfHLevelPath' n A h x y)
];

isOfHLevelDep : HLevel → (A : U)(B : A → U) → U := λ[
  zero.  λ A B. (a : A) → (b : B a) × ((a' : A)(b' : B a')(p : a = a') → b ={i. B (p i)} b');
  suc n. case n [
    zero.  λ A B. (a0 a1 : A)(b0 : B a0)(b1 : B a1)(p : a0 = a1) → b0 ={i. B (p i)} b1;
    suc n. λ A B. (a0 a1 : A)(b0 : B a0)(b1 : B a1) → isOfHLevelDep (suc n) (a0 = a1) (λ p. b0 ={i. B (p i)} b1)
  ]
];

isOfHLevel-isOfHLevelDep : (n : HLevel)(A : U)(B : A → U)(h : (a : A) → isOfHLevel n (B a)) → isOfHLevelDep n A B := λ[
  zero. λ A B h a.
    ((h a).1
    , λ a' b' p. isProp-PathP (λ i. B (p i)) (λ i. isContr-isProp (B (p i)) (h (p i))) (h a).1 b');
  suc n. ?
];

-- isOfHLevel→isOfHLevelDep : (n : HLevel)
--   → {A : Type ℓ} {B : A → Type ℓ'} (h : (a : A) → isOfHLevel n (B a)) → isOfHLevelDep n {A = A} B
-- isOfHLevel→isOfHLevelDep 0 h {a} =
--   (h a .fst , λ b' p → isProp→PathP (λ i → isContr→isProp (h (p i))) (h a .fst) b')
-- isOfHLevel→isOfHLevelDep 1 h = λ b0 b1 p → isProp→PathP (λ i → h (p i)) b0 b1
-- isOfHLevel→isOfHLevelDep (suc (suc n)) {A = A} {B} h {a0} {a1} b0 b1 =
--   isOfHLevel→isOfHLevelDep (suc n) (λ p → helper p)
--   where
--   helper : (p : a0 ≡ a1) →
--     isOfHLevel (suc n) (PathP (λ i → B (p i)) b0 b1)
--   helper p = J (λ a1 p → ∀ b1 → isOfHLevel (suc n) (PathP (λ i → B (p i)) b0 b1))
--                      (λ _ → h _ _ _) p b1


-- Brunerie
----------------------------------------------------------------------------------------------------

higher inductive S1 :=
    base1
  | loop1 (i : I) [i=0. base1; i=1. base1];

helix : S1 → U := λ[
  base1. Z;
  loop1 i. sucPathZ i
];

connection-both (A : U)(p : I → A)(rhs : A)(q : p 1 = rhs) (i j : I) : A :=
  let pface (m k : I) : A := hcom 1 m [k=0 _. p 1; k=1. p] (p 1);
  let qface (m k : I) : A := hcom 0 m [k=0 _. p 1; k=1. q] (p 1);
  hcom 0 1 [
    i=0. pface j;
    i=1. qface j;
    j=0. pface i;
    j=1. qface i]
    (p 1);

rotLoop : (a : S1) → a = a := λ[
  base1.   λ i. loop1 i;
  loop1 i. λ j. connection-both S1 (λ i. loop1 i) base1 (λ i. loop1 i) i j
];

rot : S1 → S1 → S1 := λ[
  base1. λ y. y;
  loop1 i. λ y. rotLoop y i
];

isPropFamS1 (P : S1 → U)(pP : (x : S1) → isProp (P x)) (b0 : P base1) : b0 ={i. P (loop1 i)} b0 :=
  λ i. pP (loop1 i) (coe 0 i (K1. P (loop1 K1)) b0)
                    (coe 1 i (K2. P (loop1 K2)) b0) i;

rotIsEquiv : (a : S1) → isEquiv S1 S1 (rot a) := λ[
  base1. (idEquiv S1).2;
  loop1 i. isPropFamS1 (λ x. isEquiv S1 S1 (rot x))
                       (λ x. isPropIsEquiv S1 S1 (rot x))
		       ((idEquiv S1).2) i
];

higher inductive S2 :=
  base2
| loop2 (i j : I) [i=0. base2
                  ;i=1. base2
                  ;j=0. base2
                  ;j=1. base2];

S2ToSetElim (A : S2 → U) (set : (x : S2) → isSet (A x))(b : A base2) : (x : S2) → A x := λ[
  base2. b;
  loop2 i j. ?_
     -- isOfHLevel→isOfHLevelDep 2 set b b {a0 = refl} {a1 = refl} refl refl surf i j
];

higher inductive join (A B : U) :=
  inl A
| inr B
| push (a : A) (b : B) (i : I) [ i = 0. inl a
                               ; i = 1. inr b ];

higher inductive sTrunc (A : U) :=
    sinc (a : A)
  | strunc (a b : sTrunc A) (p q : a = b) (i j : I)
      [i=0. p j
      ;i=1. q j
      ;j=0. a
      ;j=1. b];

rec0 (A B : U) (Bset : isSet B) (f : A → B) : sTrunc A → B := λ[
  sinc x. f x;
  strunc x y p q i j.
    Bset (rec0 A B Bset f x) (rec0 A B Bset f y)
         (ap (rec0 A B Bset f) p)
	 (ap (rec0 A B Bset f) q)
	 i j
];

higher inductive gTrunc (A : U) :=
    ginc A
  | gtrunc (a b : gTrunc A)(p q : a = b)(r s : p = q)(i j k : I)
         [i=0. r j k
	 ;i=1. s j k
	 ;j=0. p k
	 ;j=1. q k
	 ;k=0. a
	 ;k=1. b];

rec1 (A B : U)(gB : isGroupoid B)(f : A → B) : gTrunc A → B := λ[
  ginc x. f x;
  gtrunc a b p q r s i j k.
    let hyp := rec1 A B gB f;
    gB (hyp a) (hyp b)
       (λ n. hyp (r 0 n))
       (λ n. hyp (r 1 n))
       (λ n m. hyp (r n m))
       (λ m n. hyp (s m n))
       i j k
];

higher inductive g2Trunc (A : U) :=
    g2inc A
  | g2trunc (a b : g2Trunc A)
            (p q : a = b)
	    (r s : p = q)
	    (t u : r = s)
	    (i j k l : I)
            [i=0. t j k l
            ;i=1. u j k l
            ;j=0. r k l
            ;j=1. s k l
            ;k=0. p l
            ;k=1. q l
            ;l=0. a
            ;l=1. b];

rec2 (A B : U)(gB : is2Groupoid B)(f : A → B) : g2Trunc A → B := λ[
  g2inc x. f x;
  g2trunc a b p q r s t u i j k l.
    let hyp := rec2 A B gB f;
    gB (hyp a) (hyp b)
       (λ o. hyp (p o)) (λ o. hyp (q o))
       (λ n o. hyp (t 0 n o))
       (λ n o. hyp (t 1 n o))
       (λ m n o. hyp (t m n o))
       (λ m n o. hyp (u m n o))
       i j k l
];

elim2 (A : U) (B : g2Trunc A → U)(bG : (x : g2Trunc A) → is2Groupoid (B x))
      (f : (x : A) → B (g2inc x)) : (x : g2Trunc A) → B x := λ[
  g2inc x. f x;
  g2trunc a b p q r s u v i j k l. ?_
];

-- elim₂ : {A : Type ℓ} {B : ∥ A ∥₂ → Type ℓ}
--        (bG : (x : ∥ A ∥₂) → is2Groupoid (B x))
--        (f : (x : A) → B ∣ x ∣₂) (x : ∥ A ∥₂) → B x
-- elim₂ bG f ∣ x ∣₂ = f x
-- elim₂ bG f (squash₂ a b p q r s u v i j k l) =
--   isOfHLevel→isOfHLevelDep 4 bG
--     (elim₂ bG f a)
--     (elim₂ bG f b)
--     (λ l₁ → elim₂ bG f (p l₁))
--     (λ l₁ → elim₂ bG f (q l₁))
--     (λ k₁ l₁ → elim₂ bG f (u i0 k₁ l₁))
--     (λ k₁ l₁ → elim₂ bG f (u i1 k₁ l₁))
--     (λ j k l → elim₂ bG f (u j k l)) (λ j k l → elim₂ bG f (v j k l))
--     (squash₂ a b p q r s u v)
--     i j k l

higher inductive Susp (A : U) :=
    north
  | south
  | merid (a : A)(i : I)[i=0. north; i=1. south];

-- Type-annotated constructors
north' (A : U) : Susp A := north;
south' (A : U) : Susp A := south;
merid' (A : U)(a : A) : north' A = south' A := λ i. merid a i;

Pointed₀ : U := (X : U) × X;

S1dot : Pointed₀ := (S1, base1);
S2dot : Pointed₀ := (S2, base2);

Suspdot : U → Pointed₀ :=
  λ A. (Susp A, north);

gincdot : Pointed₀ → Pointed₀ :=
  λ Aa. (gTrunc Aa.1, ginc Aa.2);

g2incdot : Pointed₀ → Pointed₀ :=
  λ Aa. (g2Trunc Aa.1, g2inc Aa.2);

Ω : Pointed₀ → Pointed₀ :=
  λ Aa. (Aa.2 = Aa.2, refl);

Ω² : Pointed₀ → Pointed₀ :=
  λ Aa. Ω (Ω Aa);

σ : S2 → (Ω (Suspdot S2)).₁ :=
  λ x. merid' S2 x ∙ (merid' S2 base2)⁻¹;

S1xS1toS2 : S1 → S1 → S2 := λ[
  base1  . λ[base1  . base2;
             loop1 _. base2];
  loop1 i. λ[base1  . base2;
             loop1 j. loop2 i j]
];
