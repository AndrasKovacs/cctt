
isLogEquiv (A B : U)(f : A → B) : U := (B → A);

isSection (A B : U)(f : A → B) : U := (g : B → A) × (linv : (x : A) → x = g (f x));

isRetraction (A B : U)(f : A → B) : U := (g : B → A) × (rinv : (x : B) → f (g x) = x);

isIso (A B : U)(f : A → B) : U :=
    (g    : B → A)
  × (linv : (x : A) → x = g (f x))
  × (rinv : (x : B) → f (g x) = x);

isEquiv (A B : U)(f : A → B) : U :=
    (g    : B → A)
  × (linv : (x : A) → x = g (f x))
  × (rinv : (x : B) → f (g x) = x)
  × (coh  : (x : A) → refl ={i. f (linv x i) = f x} (rinv (f x)));


coeIsEquiv (A : I → U)(r r' : I) : isEquiv (A r) (A r') (λ x. coe r r' A x) :=
  let f'    (i : I)(x : A r)        : A i := coe r i A x;
  let g'    (i : I)(x : A i)        : A r := coe i r A x;
  let linv' (i : I)(x : A r)(j : I) : A r := hcom r i (A r) [j=0 k. x; j=1 k. coe k r A (coe r k A x)] x;
  let rinv' (i : I)(x : A i)(j : I) : A i := hcom i r (A i) [j=0 k. coe k i A (coe i k A x); j=1 k. x] x;

  let foo :U := ?;
  let bar :U := ?;

  ( λ x. g' r' x
  , λ x j. linv' r' x j
  , λ x j. rinv' r' x j
  , λ x l k. com r r' A
                      [k=0 i. f' i (linv' i x l)
                      ;k=1 i. f' i x
		      ;l=0 i. f' i x
		      ;l=1 i. rinv' i (f' i x) k]
		      x
  );

-- foo : U := ?;
-- bar : foo = U := refl;

hole1 (A : U) : U := ?;
hole1 (A : U) : U := ?;

-- foo : hole1 U = hole1 (U → U) := refl;
