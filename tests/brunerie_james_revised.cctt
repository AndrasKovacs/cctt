isEquiv (A B : U)(f : A → B) : U :=
    (g    : B → A)
  × (linv : (x : A) → g (f x) = x)
  × (rinv : (x : B) → f (g x) = x)
  × (coh  : (x : A) → (rinv (f x)) ={i. f (linv x i) = f x} refl);

equiv (A B : U) : U :=
  (f : A → B) × isEquiv A B f;

idEquiv (A : U) : equiv A A :=
  (λ x. x, λ x. x, λ x _. x, λ x _. x, λ x _ _. x);

connAnd (A : U)(a b : A)(p : a = b) : (λ _. a) ={i. a = p i} p
  := let sq (l k : I) : A := hcom 1 l [k=0 _. a; k=1. p] (p k);
     λ i j. hcom 0 1 [i=0. sq 0; i=1. sq j; j=0. sq 0; j=1. sq i; i=j. sq i] a;

Ω (A : U) (x : A) : U := x = x;
Ω² (A : U) (x : A) : U := Ω (Ω A x) refl;
Ω³ (A : U) (x : A) : U := Ω (Ω² A x) refl;
Ω⁴ (A : U) (x : A) : U := Ω (Ω³ A x) refl;

higher inductive S¹ :=
    base1
  | loop1 (i : I) [i=0. base1; i=1. base1];

higher inductive S² :=
  base2
| loop2 (i j : I) [i=0. base2
                  ;i=1. base2
                  ;j=0. base2
                  ;j=1. base2];


Square (A : U) (a0 a1 b0 b1 : A)
               (u : a0 = a1) (v : b0 = b1)
               (r0 : a0 = b0) (r1 : a1 = b1) : U
 := r0 ={i. u i = v i} r1;

isContr (A : U) : U := (fst : A) × ((y : A) → fst = y);
isProp (A : U) : U := (a b : A) → a = b;
isSet (A : U) : U := (a b : A) → isProp (a = b);

lemPropFam (A : U) (P : A → U) (pP : (x : A) → isProp (P x)) (a0 a1 : A)
           (p : a0 = a1) (b0 : P a0) (b1 : P a1) : b0 ={ap P p} b1
  := λ i. pP (p i) (coe 0 i (ap P p) b0) (coe 1 i (ap P p) b1) i;

ua (A B : U)(f : equiv A B) : A = B :=
  λ i. Glue B [i=0. (A, f); i=1. (B, idEquiv B)];

isIso (A B : U)(f : A → B) : U :=
    (g    : B → A)
  × (linv : (x : A) → g (f x) = x)
  × (rinv : (x : B) → f (g x) = x);

iso (A B : U) : U := (f : A → B) × isIso A B f;

fiber (A B : U) (f : A → B) (b : B) : U
  := (x : A) * f x = b;

fiberRefl (A B : U) (f : A → B) (a  : A) : fiber A B f (f a)
  := (a , refl);

contractIsoFiber (A B : U) (is : iso A B) (a : A)
  (fib : fiber A B is.f (is.f a))
  : fib = fiberRefl A B is.f a
  :=
  let sq (j k : I) : A :=
      hcom k j [k=0 j. is.g (fib.2 j); k=1 _. fib.1] (is.linv (fib.1) k);
  let sq2 (i k : I) : A :=
      hcom 0 k
        [i=0. sq 1;
         i=1. is.linv a]
        (is.g (is.f a));
  λ i.
  (sq2 i 1,
   λ j.
   let aux : A :=
     hcom j 0
       [i=0. sq j;
        i=1. is.linv a;
        j=1. sq2 i]
       (is.linv (sq2 i 1) j);
   hcom 0 1
     [i=0. is.rinv (fib.2 j);
      i=1. is.rinv (is.f a);
      j=0. is.rinv (is.f (sq2 i 1));
      j=1. is.rinv (is.f a)]
     (is.f aux));

isoToEquiv (A B : U) (is : iso A B) : equiv A B :=
    is.f
  , is.g
  , λ a i. (contractIsoFiber A B is a (is.g (is.f a), is.rinv (is.f a)) i).1
  , is.rinv
  , λ a i. (contractIsoFiber A B is a (is.g (is.f a), is.rinv (is.f a)) i).2
  ;

J (A : U) (a : A) (C : (x : A) → a = x → U) (d : C a (λ _. a))(x : A) (p : a = x) : C x p
  := let sq (i j : I) : A := hcom 0 j [i=0 _. a; i=1. p] a;
     coe 0 1 (i. C (sq i 1) (λ j. sq i j)) d;

-- Integers
----------------------------------------------------------------------------------------------------

inductive ℕ := zero | suc ℕ;

num1 := suc zero;
num2 := suc (suc zero);
num3 := suc (suc (suc zero));
num4 := suc (suc (suc (suc zero)));

pred : ℕ → ℕ := λ[
  zero. zero;
  suc n. n];

inductive ℤ := pos ℕ | neg ℕ;

zeroℤ := pos zero;

predℤ : ℤ → ℤ := λ[
  pos u. case u [zero. neg zero; suc n. pos n];
  neg v. neg (suc v)];

sucℤ : ℤ → ℤ := λ[
  pos u. pos (suc u);
  neg v. case v [zero. pos zero; suc n. neg n]];

predsucℤ : (x : ℤ) → predℤ (sucℤ x) = x := λ[
  pos u. refl;
  neg v. case v (v. predℤ (sucℤ (neg v)) = neg v) [
    zero. refl;
    suc n. refl
    ]
  ];

sucpredℤ : (x : ℤ) → sucℤ (predℤ x) = x := λ[
  pos u. case u (u. sucℤ (predℤ (pos u)) = pos u) [
    zero.  refl;
    suc n. refl
    ];
  neg v. refl
  ];

sucℤIso : iso ℤ ℤ :=
    λ x. sucℤ x
  , λ x. predℤ x
  , predsucℤ
  , sucpredℤ;

sucPathℤ : ℤ = ℤ :=
  ua ℤ ℤ (isoToEquiv ℤ ℤ sucℤIso);

helix : S¹ → U := λ[
  base1. ℤ;
  loop1 i. sucPathℤ i
];

connection-both (A : U)(p : I → A)(rhs : A)(q : p 1 = rhs) (i j : I) : A :=
  let pface (m k : I) : A := hcom 1 m [k=0 _. p 1; k=1. p] (p 1);
  let qface (m k : I) : A := hcom 0 m [k=0 _. p 1; k=1. q] (p 1);
  hcom 0 1 [
    i=0. pface j;
    i=1. qface j;
    j=0. pface i;
    j=1. qface i]
    (p 1);

rotLoop : (a : S¹) → a = a := λ[
  base1.   λ i. loop1 i;
  loop1 i. λ j. connection-both S¹ (λ i. loop1 i) base1 (λ i. loop1 i) i j
];

-- end copy from new_brunerie.cctt



-- isPropIsEquiv (lots of this is copied from basics.cctt)

hasContrFibers (A B : U) (f : A → B) : U := (b : B) → isContr (fiber A B f b);

connAnd' (A : U)(a b : A)(p : a = b) : (λ _. a) ={i. a = p i} p
  :=
  let sq (l k : I) : A := hcom 0 l [k=0 _. a; k=1. p] a;
  λ i j. hcom 0 1 [i=0 _. a; i=1. sq j; j=0 _. a; j=1. sq i] a;

connAndRefl (A : U)(a : A) : connAnd' A a a refl = refl
  :=
  λ m.
  let sq (l k : I) : A := hcom 0 l [k=0 _. a; k=1 _. a; m=1 _. a] a;
  λ i j. hcom 0 1 [i=0 _. a; i=1. sq j; j=0 _. a; j=1. sq i; m=1 _. a] a;

isEquivToContrFibers (A B : U) (f : A → B) (e : isEquiv A B f) : hasContrFibers A B f
  :=
  λ b.
  ((e.g b, e.rinv b),
   λ fib i.
   let a : A := fib.1;
   let p : f a = b := fib.2;
   let domFiller (k : I) : A :=
     hcom 0 k
       [i=0 k. e.g (p k);
        i=1 _. a]
       (e.linv a i);
   (domFiller 1,
    λ j.
    hcom 0 1
      [i=0 k. e.rinv (p k) j;
       i=1. connAnd' B (f a) b p j;
       j=0 k. f (domFiller k);
       j=1. p]
      (e.coh a i j)));

contrFibersToIsEquiv (A B : U) (f : A → B) (c : hasContrFibers A B f) : isEquiv A B f
  :=
  λ b. (c b).1.1,
  λ a i. ((c (f a)).2 (a, refl) i).1,
  λ b. (c b).1.2,
  λ a i. ((c (f a)).2 (a, refl) i).2;

isEquivRetractContrFibers (A B : U) (f : A → B) (e : isEquiv A B f)
  : contrFibersToIsEquiv A B f (isEquivToContrFibers A B f e) = e
  :=
  λ l.
  let domFiller (a : A) (i : I) (k : I) : A :=
    hcom 0 k
      [i=0 _. e.g (f a);
       i=1 _. a;
       l=1 _. e.linv a i]
      (e.linv a i);
  (e.g,
   λ a i. domFiller a i 1,
   e.rinv,
   λ a i j.
   hcom 0 1
      [i=0 _. e.rinv (f a) j;
       i=1. connAndRefl B (f a) l j;
       j=0 k. f (domFiller a i k);
       j=1 _. f a;
       l=1 _. e.coh a i j]
      (e.coh a i j));

isPropIsContr (A : U) : isProp (isContr A)
  := λ c d i.
       (c.2 d.fst i,
        (λ x j.
           hcom 0 1
             [ j=0 _. c.2 d.1 i
             ; j=1 _. x
             ; i=0 i. hcom i 1
                        [ j=0 j. c.2 c.1 j
                        ; j=1 j. c.2 x j
                        ]
                        (c.2 (c.2 x j) i)
             ; i=1 i. hcom i 1
                        [ j=0 j. c.2 d.1 j
                        ; j=1 j. c.2 x j
                        ]
                        (c.2 (d.2 x j) i)
             ]
             (hcom 0 1
                [ j=0 j. c.2 (c.2 d.1 i) j
                ; j=1 j. c.2 x j
                ]
                c.1)));

isPropPi (A : U) (B : A → U) (pr : (x : A) → isProp (B x))
  : isProp ((x : A) → B x)
  := λ f g i x. pr x (f x) (g x) i;

isPropHasContrFibers (A B : U) (f : A → B) : isProp (hasContrFibers A B f)
  := isPropPi B (λ b. isContr (fiber A B f b))
       (λ b. isPropIsContr (fiber A B f b));

isPropIsEquiv (A B : U) (f : A → B) : isProp (isEquiv A B f)
  := λ e1 e2 i.
       hcom 0 1
         [ i=0. isEquivRetractContrFibers A B f e1
         ; i=1. isEquivRetractContrFibers A B f e2
         ]
         (contrFibersToIsEquiv A B f
           (isPropHasContrFibers A B f
             (isEquivToContrFibers A B f e1)
             (isEquivToContrFibers A B f e2)
             i));

-- local-global looping

Z (A : U) : U := Ω (A → A) (λ x. x);

rotIsEquiv (A : U) (h : Z A) (i : I)
  : isEquiv A A (λ x. h i x)
  := lemPropFam
       (A → A)
       (isEquiv A A)
       (isPropIsEquiv A A)
       (λ x. x)
       (λ x. x)
       (λ i x. h i x)
       (idEquiv A).2
       (idEquiv A).2
       i;

rotEquiv (A : U) (h : Z A)
  : idEquiv A = idEquiv A
  := λ i. (h i, rotIsEquiv A h i);

global (A : U) (h : Z A)
  : Ω² U A
  := λ i j. Glue A [i=0. (A, idEquiv A);
                    i=1. (A, idEquiv A);
                    j=0. (A, rotEquiv A h i);
                    j=1. (A, idEquiv A)];

globalS² (A : U) (h : Z A)
  : S² → U
  := λ [ base2. A
       ; loop2 i j. global A h i j
       ];

ΩS² : U := Ω S² base2;

recΩS² (A : U) (x : A) (h : Z A) : ΩS² → A
  := λ p. coe 0 1 (i. globalS² A h (p i)) x;

windingS¹ : Ω S¹ base1 → ℤ :=
  λ p. coe 0 1 (i. helix (p i)) (pos zero);

windingS² : Ω² S² base2 → ℤ :=
  λ p. windingS¹ (λ i. recΩS² S¹ base1 (λ i x. rotLoop x i) (p i));

-- Whitehead product [loop2, loop2] (almost)
w22' : Ω (Ω² S² base2) (λ a b. loop2 a b) :=
  λ j a b.
    hcom 0 1
      [j=0 i. loop2 a b;
       j=1 i. loop2 a b;
       a=0 i. loop2 i j;
       a=1 i. loop2 i j;
       b=0 i. loop2 i j;
       b=1 i. loop2 i j]
      (loop2 a b);

dsqInv (A : U) (x y : A) (p : x = y) (r : p = p) : Ω² A x
  := J A x (λ y p. p = p → Ω² A x)
       (λ r. r)
       y p r;

-- Whitehead product [loop2, loop2]
w22 : Ω³ S² base2 :=
  dsqInv ΩS² refl refl (λ i j. loop2 i j)
    w22';

-- cheating!
tr₂S² : U := S²;

cheating : (y : tr₂S²) → Ω² tr₂S² y
  := λ[ base2. λ i j. loop2 i j
      ; loop2 i j. ?_ -- should actually use tr₂S² so that this happens
      ];

direct2 : S¹ → (y : tr₂S²) → Ω tr₂S² y
  := λ[ base1. λ y. refl
      ; loop1 i. λ y. cheating y i
      ];

direct : Z (S¹ × tr₂S²)
  := λ i x. (rotLoop x.1 i, direct2 x.1 x.2 i);

split : ΩS² → S¹ × tr₂S²
  := recΩS² (S¹ × tr₂S²) (base1, base2) direct;

writhe (p : Ω³ S² base2) : ℤ
  := windingS² (λ i j. (split (λ k. p i j k)).2);

brunerie : ℤ :=
  writhe w22;



-- hmm
squareConnAnd (A : U) (x : A) (p : Ω² A x)
  : refl ={i. refl ={j. x ={k. A} p i j} (λ k. p i k)} refl
  := λ i. hcom 0 1
            [ i=0 j. connAndRefl A x j
            ; i=1 j. connAndRefl A x j
            ]
            (connAnd' A (p i 0) (p i 1) (λ j. p i j));

-- Eckmann-Hilton (hmm)
EH (A : U) (x : A) (p q : Ω² A x) : q ={i. p i = p i} q
  := λ i j k.
       hcom 0 1
         [ i=0 l. squareConnAnd A x q j k l
         ; i=1 l. squareConnAnd A x q j k l
         ; j=0 _. p i k
         ; j=1 _. p i k
         ; k=0 _. x
         ; k=1 l. q j l
         ]
         (p i k);

csqInvOld (A : U) (x y z : A) (p : x = y) (q : y = z)
  (r : p ={i. p i = q i} q)
  : Ω² A y
  := J A x
       (λ y p. (q : y = z) → p ={i. p i = q i} q → Ω² A y)
       (J A x
          (λ z q. refl ={i. x = q i} q → Ω² A x)
          (λ r. r)
          z)
       y p q r;

-- hmm, this "optimized" version of csqInvOld has a much smaller
-- normal form, but leads to worse performance below (both time and
-- memory.) this was adapted from connection-both.
csqInv (A : U) (x y z : A) (p : x = y) (q : y = z)
  (r : (λ j. p j) ={i. p i = q i} q)
  : Ω² A y :=
  λ i j.
  let pface (m k : I) : A := hcom 1 m [k=0. p; k=1 _. y] y;
  let qface (m k : I) : A := hcom 0 m [k=0. q; k=1 _. y] y;
  hcom 0 1 [
    i=0. pface j;
    i=1. qface j;
    j=0. pface i;
    j=1. qface i]
    (r i j);

hopf (A : U) (x : A) (p : Ω² A x) : Ω³ A x
  := csqInv (Ω A x) refl refl refl p p
       (EH A x p p);

generatorS² : Ω³ S² base2 := hopf S² base2 (λ i j. loop2 i j);

generator : ℤ
  := writhe (hopf S² base2 (λ i j. loop2 i j));

generatorflip : ℤ
  := writhe (hopf S² base2 (λ i j. loop2 j i));



-- on to pi4s3

-- first, need to fill squares over isEquiv :(

-- stolen from yaccttprelude.cctt
connOr (A : U) (a b : A) (p : a = b) : p ={i. p i = b} (λ _. b)
  := let connOrWeak (l k : I) : A := hcom 0 l [k=0. p; k=1 _. b] (p k);
     λ i j. hcom 1 0 [ i=0. connOrWeak j ; i=1. connOrWeak 1
                     ; j=0. connOrWeak i ; j=1. connOrWeak 1
                     ; i=j. connOrWeak i ] b;

-- stolen from pathd/hlevel in redtt/library/prelude/hlevel.red
fromPathPPath (A : I → U) (a0 : A 0) (a1 : A 1) :
  (a0 ={i. A i} a1) = (coe 0 1 (i. A i) a0 = a1) :=
  λ i. (coe 0 i (j. A j) a0 ={j. connOr U (A 0) (A 1) (λ i. A i) i j} a1);

isPropSquareSet (A : I → I → U) (A-set : (i j : I) → isSet (A i j))
  (p0- : (j : I) → A 0 j)
  (p1- : (j : I) → A 1 j)
  (p-0 : p0- 0 ={i. A i 0} p1- 0)
  (p-1 : p0- 1 ={i. A i 1} p1- 1)
  (i : I) : isProp (p-0 i ={j. A i j} p-1 i) :=
  coe 1 0 (t. isProp (fromPathPPath (λ j. A i j) (p-0 i) (p-1 i) t))
    (A-set i 1 (coe 0 1 (j. A i j) (p-0 i)) (p-1 i));

lemPropFam' (A : I → U) (A-prop : (i : I) → isProp (A i))
  (a0 : A 0) (a1 : A 1) : a0 ={i. A i} a1 :=
  λ i. A-prop i (coe 0 i (i. A i) a0) (coe 1 i (i. A i) a1) i;

-- there must be a better way...
lemSetFam (A : I → I → U) (A-set : (i j : I) → isSet (A i j))
  (p0- : (j : I) → A 0 j)
  (p1- : (j : I) → A 1 j)
  (p-0 : p0- 0 ={i. A i 0} p1- 0)
  (p-1 : p0- 1 ={i. A i 1} p1- 1)
  : (λ j. p0- j) ={i. p-0 i ={j. A i j} p-1 i} (λ j. p1- j) :=
  lemPropFam'
    (λ i. p-0 i ={j. A i j} p-1 i)
    (λ i. isPropSquareSet A A-set p0- p1- p-0 p-1 i)
    (λ j. p0- j)
    (λ j. p1- j);

-- from new_brunerie.cctt
isProp-isSet : (A : U) → isProp A → isSet A :=
  λ A h a b p q j i.
    hcom 0 1 [i = 0. h a a
             ;i = 1. h a b
             ;j = 0. h a (p i)
             ;j = 1. h a (q i)] a;

Z2 (A : U) : U := Ω² (A → A) (λ x. x);

rot2IsEquiv (A : U) (h : Z2 A) (i j : I)
  : isEquiv A A (λ x. h i j x)
  := lemSetFam
       (λ i j. isEquiv A A (h i j))
       (λ i j. isProp-isSet (isEquiv A A (λ x. h i j x)) (isPropIsEquiv A A (λ x. h i j x)))
       (λ j. (idEquiv A).2)
       (λ j. (idEquiv A).2)
       (λ i. (idEquiv A).2)
       (λ i. (idEquiv A).2)
       i j;

rot2Equiv (A : U) (h : Z2 A) (i j : I) : equiv A A
  := ((λ x. h i j x), rot2IsEquiv A h i j);

-- next level of local-global looping
global3 (A : U) (h : Z2 A)
  : Ω³ U A
  := λ i j k. Glue A [i=0. (A, idEquiv A);
                      i=1. (A, idEquiv A);
                      j=0. (A, idEquiv A);
                      j=1. (A, idEquiv A);
                      k=0. (A, rot2Equiv A h i j);
                      k=1. (A, idEquiv A)];

higher inductive S³ :=
  base3
| loop3 (i j k : I)
    [i=0. base3;
     i=1. base3;
     j=0. base3;
     j=1. base3;
     k=0. base3;
     k=1. base3];

higher inductive J₂S² :=
  j2s2-base
| j2s2-surf (i j : I)
    [i=0. j2s2-base;
     i=1. j2s2-base;
     j=0. j2s2-base;
     j=1. j2s2-base]
| j2s2-surfsurf (i j a b : I)
    [i=0. j2s2-surf a b;
     i=1. j2s2-surf a b;
     j=0. j2s2-surf a b;
     j=1. j2s2-surf a b;
     a=0. j2s2-surf i j;
     a=1. j2s2-surf i j;
     b=0. j2s2-surf i j;
     b=1. j2s2-surf i j];

-- cheating again, should 3-truncate J₂S² -- actually 4-truncation
-- suffices, but we only care up to 3-truncation here -- so that this
-- actually happens
surfsJ₂S² : (x : J₂S²) → Ω² J₂S² x :=
  λ [j2s2-base. λ k l. j2s2-surf k l;
     j2s2-surf i j. λ k l. j2s2-surfsurf i j k l;
     j2s2-surfsurf i j a b. ?_];

toJ₂S² : Ω S³ base3 → J₂S² :=
  let F : S³ → U :=
    λ [base3. J₂S²;
       loop3 i j k. global3 J₂S² (λ i j x. surfsJ₂S² x i j) i j k];
  λ p. coe 0 1 (i. F (p i)) j2s2-base;

gen-π₄S³ : Ω⁴ S³ base3 :=
  hopf (Ω S³ base3) refl (λ i j k. loop3 i j k);

-- normal form: 193KB :(
-- better than 35MB before with csqInvOld!
-- but observe that it does not contain j2s2-surfsurf!!!
ouch : Ω³ J₂S² j2s2-base :=
  λ i j k. toJ₂S² (gen-π₄S³ i j k);

-- this cheat is not justified, but, I expect the resulting
-- computation is quite similar (no harder at least) than the real one
-- I want to do
terrible-cheat : J₂S² → S² :=
  λ[j2s2-base. base2;
    j2s2-surf i j. loop2 i j;
    j2s2-surfsurf i j a b. ?_];

hope : ℤ := writhe (λ i j k. terrible-cheat (ouch i j k));


w22thing : Ω³ S² base2 :=
  λ i j k. hcom 1 0 [i = 1 l. hcom 0 1 [l = 0 _. base2; l = 1 i. hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] (loop2 k i))] base2; j = 0 l. hcom 0 i [l = 0 _. base2; l = 1 i. hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] (loop2 k i))] base2; j = 1 l. hcom 0 i [l = 0 _. base2; l = 1 i. hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] (loop2 k i))] base2; i = 0 l. hcom 1 0 [j = 0 i. hcom 0 i [l = 0 _. base2; l = 1 i. hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2)] base2; j = 1 i. hcom 0 i [l = 0 _. base2; l = 1 i. hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2)] base2; l = 0 _. base2; l = 1 i. hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] (loop2 @1 j)] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2)] (hcom 0 1 [l = 0 _. base2; l = 1 i. hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2)] base2); k = 0 l. hcom 1 i [j = 0 i. hcom 0 i [l = 0 _. base2; l = 1 i. hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2)] base2; j = 1 i. hcom 0 i [l = 0 _. base2; l = 1 i. hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2)] base2; l = 0 _. base2; l = 1 i. hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] (loop2 @1 j)] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2)] (hcom 0 1 [l = 0 _. base2; l = 1 i. hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2)] base2); k = 1 l. hcom 1 i [j = 0 i. hcom 0 i [l = 0 _. base2; l = 1 i. hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2)] base2; j = 1 i. hcom 0 i [l = 0 _. base2; l = 1 i. hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2)] base2; l = 0 _. base2; l = 1 i. hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] (loop2 @1 j)] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2)] (hcom 0 1 [l = 0 _. base2; l = 1 i. hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] base2)] base2)] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 _. base2; j = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] (loop2 @1 j)] (hcom 0 1 [i = 0 _. base2; i = 1 j. hcom 0 1 [j = 0 j. base2; j = 1 _. base2] base2] (loop2 k i)));

error : ℤ := writhe w22thing;
