isEquiv (A B : U)(f : A → B) : U :=
    (g    : B → A)
  × (linv : (x : A) → g (f x) = x)
  × (rinv : (x : B) → f (g x) = x)
  × (coh  : (x : A) → (rinv (f x)) ={i. f (linv x i) = f x} refl);

equiv (A B : U) : U :=
  (f : A → B) × isEquiv A B f;

idEquiv (A : U) : equiv A A :=
  (λ x. x, λ x. x, λ x _. x, λ x _. x, λ x _ _. x);

connAnd (A : U)(a b : A)(p : a = b) : (λ _. a) ={i. a = p i} p
  := let sq (l k : I) : A := hcom 1 l [k=0 _. a; k=1. p] (p k);
     λ i j. hcom 0 1 [i=0. sq 0; i=1. sq j; j=0. sq 0; j=1. sq i; i=j. sq i] a;

Ω (A : U) (x : A) : U := x = x;
Ω² (A : U) (x : A) : U := Ω (Ω A x) refl;
Ω³ (A : U) (x : A) : U := Ω (Ω² A x) refl;

higher inductive S¹ :=
    base1
  | loop1 (i : I) [i=0. base1; i=1. base1];

higher inductive S² :=
  base2
| loop2 (i j : I) [i=0. base2
                  ;i=1. base2
                  ;j=0. base2
                  ;j=1. base2];


Square (A : U) (a0 a1 b0 b1 : A)
               (u : a0 = a1) (v : b0 = b1)
               (r0 : a0 = b0) (r1 : a1 = b1) : U
 := r0 ={i. u i = v i} r1;

isContr (A : U) : U := (fst : A) × ((y : A) → fst = y);
isProp (A : U) : U := (a b : A) → a = b;
isSet (A : U) : U := (a b : A) → isProp (a = b);

ua (A B : U)(f : equiv A B) : A = B :=
  λ i. Glue B [i=0. (A, f); i=1. (B, idEquiv B)];

isIso (A B : U)(f : A → B) : U :=
    (g    : B → A)
  × (linv : (x : A) → g (f x) = x)
  × (rinv : (x : B) → f (g x) = x);

iso (A B : U) : U := (f : A → B) × isIso A B f;

fiber (A B : U) (f : A → B) (b : B) : U
  := (x : A) * f x = b;

fiberRefl (A B : U) (f : A → B) (a  : A) : fiber A B f (f a)
  := (a , refl);

contractIsoFiber (A B : U) (is : iso A B) (a : A)
  (fib : fiber A B is.f (is.f a))
  : fib = fiberRefl A B is.f a
  :=
  let sq (j k : I) : A :=
      hcom k j [k=0 j. is.g (fib.2 j); k=1 _. fib.1] (is.linv (fib.1) k);
  let sq2 (i k : I) : A :=
      hcom 0 k
        [i=0. sq 1;
         i=1. is.linv a]
        (is.g (is.f a));
  λ i.
  (sq2 i 1,
   λ j.
   let aux : A :=
     hcom j 0
       [i=0. sq j;
        i=1. is.linv a;
        j=1. sq2 i]
       (is.linv (sq2 i 1) j);
   hcom 0 1
     [i=0. is.rinv (fib.2 j);
      i=1. is.rinv (is.f a);
      j=0. is.rinv (is.f (sq2 i 1));
      j=1. is.rinv (is.f a)]
     (is.f aux));

isoToEquiv (A B : U) (is : iso A B) : equiv A B :=
    is.f
  , is.g
  , λ a i. (contractIsoFiber A B is a (is.g (is.f a), is.rinv (is.f a)) i).1
  , is.rinv
  , λ a i. (contractIsoFiber A B is a (is.g (is.f a), is.rinv (is.f a)) i).2
  ;

J (A : U) (a : A) (C : (x : A) → a = x → U) (d : C a (λ _. a))(x : A) (p : a = x) : C x p
  := let sq (i j : I) : A := hcom 0 j [i=0 _. a; i=1. p] a;
     coe 0 1 (i. C (sq i 1) (λ j. sq i j)) d;

-- Integers
----------------------------------------------------------------------------------------------------

inductive ℕ := zero | suc ℕ;

num1 := suc zero;
num2 := suc (suc zero);
num3 := suc (suc (suc zero));
num4 := suc (suc (suc (suc zero)));

pred : ℕ → ℕ := λ[
  zero. zero;
  suc n. n];

inductive ℤ := pos ℕ | neg ℕ;

zeroℤ := pos zero;

predℤ : ℤ → ℤ := λ[
  pos u. case u [zero. neg zero; suc n. pos n];
  neg v. neg (suc v)];

sucℤ : ℤ → ℤ := λ[
  pos u. pos (suc u);
  neg v. case v [zero. pos zero; suc n. neg n]];

predsucℤ : (x : ℤ) → predℤ (sucℤ x) = x := λ[
  pos u. refl;
  neg v. case v (v. predℤ (sucℤ (neg v)) = neg v) [
    zero. refl;
    suc n. refl
    ]
  ];

sucpredℤ : (x : ℤ) → sucℤ (predℤ x) = x := λ[
  pos u. case u (u. sucℤ (predℤ (pos u)) = pos u) [
    zero.  refl;
    suc n. refl
    ];
  neg v. refl
  ];

sucℤIso : iso ℤ ℤ :=
    λ x. sucℤ x
  , λ x. predℤ x
  , predsucℤ
  , sucpredℤ;

sucPathℤ : ℤ = ℤ :=
  ua ℤ ℤ (isoToEquiv ℤ ℤ sucℤIso);

helix : S¹ → U := λ[
  base1. ℤ;
  loop1 i. sucPathℤ i
];

connection-both (A : U)(p : I → A)(rhs : A)(q : p 1 = rhs) (i j : I) : A :=
  let pface (m k : I) : A := hcom 1 m [k=0 _. p 1; k=1. p] (p 1);
  let qface (m k : I) : A := hcom 0 m [k=0 _. p 1; k=1. q] (p 1);
  hcom 0 1 [
    i=0. pface j;
    i=1. qface j;
    j=0. pface i;
    j=1. qface i]
    (p 1);

rotLoop : (a : S¹) → a = a := λ[
  base1.   λ i. loop1 i;
  loop1 i. λ j. connection-both S¹ (λ i. loop1 i) base1 (λ i. loop1 i) i j
];

rot : S¹ → S¹ → S¹ := λ[
  base1. λ y. y;
  loop1 i. λ y. rotLoop y i
];

-- end copy from new_brunerie.cctt



-- Now let's prove isPropIsEquiv ... I am just going to copy theorem
-- 4.2.13 from the book, lol.

lemProp (A : U) (h : A → isProp A) : isProp A
  := λ x y. h x x y;

contrProp (A : U) (h : isContr A) : isProp A
  := λ x y. (h.2 x) ⁻¹ ∙ h.2 y;

lemContrProp (A : U) (h : A → isContr A) : isProp A
  := lemProp A (λ a. contrProp A (h a));

contrPi (A : U) (B : A → U) (c : (x : A) → isContr (B x))
  : isContr ((x : A) → B x)
  := ((λ x. (c x).1),
      (λ f i x. contrProp (B x) (c x) (c x).1 (f x) i));

lemPropOver (A : U) (B : A → U) (pr : (x : A) → isProp (B x))
  (x y : A) (p : x = y) (u : B x) (v : B y)
  : u ={i. B (p i)} v
  := J A x
       (λ y p. (v : B y) → u ={i. B (p i)} v)
       (pr x u)
       y p v;

contrSig (A : U) (B : A → U) (ca : isContr A) (cb : (x : A) → isContr (B x))
  : isContr ((x : A) × B x)
  := ((ca.1, (cb ca.1).1),
      (λ y i. (ca.2 y.1 i, lemPropOver A B (λ x. contrProp (B x) (cb x)) ca.1 y.1 (ca.2 y.1) (cb ca.1).1 y.2 i)));

lInv (A : U) (x y : A) (p : x = y) : p ⁻¹ ∙ p = refl
  := J A x
       (λ y p. p ⁻¹ ∙ p = refl)
       (λ j i. hcom j 1 [i=0 _. x; i=1 _. x] (hcom j 1 [i=0 j. x; i=1 _. x] x))
       y p;

contrPath (A : U) (x y : A) (c : isContr A) : isContr (x = y)
  := (contrProp A c x y,
      J A x
        (λ y p. contrProp A c x y = p)
        (lInv A c.1 x (c.2 x))
        y);

isCEquiv (A B : U) (f : A → B) : U
  := (b : B) → isContr (fiber A B f b);

toCEquivLemma (A B : U) (f : A → B) (e : isEquiv A B f)
  (b : B) (a : A) (p : f a = b)
  : (e.g b, e.rinv b) ={_. fiber A B f b} (a, p)
  := J B (f a)
       (λ b p. (e.g b, e.rinv b) ={_. fiber A B f b} (a, p))
       (λ i. (e.linv a i, e.coh a i))
       b p;

toCEquiv (A B : U) (f : A → B) (e : isEquiv A B f) : isCEquiv A B f
  := λ b. ((e.g b, e.rinv b),
           (λ u. toCEquivLemma A B f e b u.1 u.2));

linv (A B : U) (f : A → B) : U := (g : B → A) × ((a : A) → g (f a) = a);
rinv (A B : U) (f : A → B) : U := (g : B → A) × ((b : B) → f (g b) = b);

precompIso (A B C : U) (f : A → B) (e : isIso A B f)
  : isIso (B → C) (A → C) (λ g a. g (f a))
  := ((λ h b. h (e.g b)),
      (λ h i b. h (e.rinv b i)),
      (λ g i a. g (e.linv a i)));

postcomp (A B C : U) (f : A → B) (g : C → A) (c : C) : B := f (g c);

postcompEquiv (A B C : U) (f : A → B) (e : isEquiv A B f)
  : isEquiv (C → A) (C → B) (postcomp A B C f)
  := ((λ g c. e.g (g c)),
      (λ g i c. e.linv (g c) i),
      (λ g i c. e.rinv (g c) i),
      (λ g i j c. e.coh (g c) i j));

retract (A B : U) : U := (f : A → B) × rinv A B f;

retractContr (A B : U) (r : retract A B)
  : isContr A → isContr B
  := λ c. (r.f c.1, (λ b. (ap r.f (c.2 (r.2.g b))) ∙ r.2.2 b));

postcompFiber (A B : U) (f : A → B) : U
  := fiber (B → A) (B → B) (λ g c. f (g c)) (λ b. b);

postcompFiberLemma (A B : U) (f : A → B)
  : retract (postcompFiber A B f) (rinv A B f)
  := ((λ r. (r.1, (λ b i. r.2 i b))),
      (λ r. (r.1, (λ i b. r.2 b i))),
      (λ r. refl));

rinvContr (A B : U) (f : A → B) (e : isEquiv A B f) : isContr (rinv A B f)
  := retractContr
       (postcompFiber A B f)
       (rinv A B f)
       (postcompFiberLemma A B f)
       (toCEquiv (B → A) (B → B)
         (postcomp A B B f)
         (postcompEquiv A B B f e)
         (λ b. b));

rcoh1 (A B : U) (f : A → B) (r : rinv A B f) : U
  := (linv : (a : A) → r.g (f a) = a)
     × ((x : A) → (r.2 (f x)) ={i. f (linv x i) = f x} refl);

rcoh2 (A B : U) (f : A → B) (r : rinv A B f) : U
  := ((x : A) → (r.g (f x), r.2 (f x)) ={_. fiber A B f (f x)} (x, refl));

rcohRetract (A B : U) (f : A → B) (r : rinv A B f)
  : retract (rcoh2 A B f r) (rcoh1 A B f r)
  := ((λ c. ((λ a i. (c a i).1), (λ a i. (c a i).2))),
      (λ c. (λ a i. (c.1 a i, c.2 a i))),
      (λ c. refl));

rcoh2Contr (A B : U) (f : A → B) (e : isEquiv A B f) (r : rinv A B f)
  : isContr (rcoh2 A B f r)
  := contrPi A (λ x. (r.g (f x), r.2 (f x)) ={_. fiber A B f (f x)} (x, refl))
      (λ x. contrPath
              (fiber A B f (f x))
              (r.g (f x), r.2 (f x))
              (x, refl)
              (toCEquiv A B f e (f x)));

rcoh1Contr (A B : U) (f : A → B) (e : isEquiv A B f) (r : rinv A B f)
  : isContr (rcoh1 A B f r)
  := retractContr
       (rcoh2 A B f r)
       (rcoh1 A B f r)
       (rcohRetract A B f r)
       (rcoh2Contr A B f e r);

rcohEquivRetract (A B : U) (f : A → B)
  : retract ((r : rinv A B f) × rcoh1 A B f r)
            (isEquiv A B f)
  := ((λ r. (r.1.1, r.2.1, r.1.2, r.2.2)),
      (λ r. ((r.1, r.2.2.1), r.2.1, r.2.2.coh)),
      (λ r. refl));

-- 52MB normal form :D :D :D
isPropIsEquiv (A B : U) (f : A → B) : isProp (isEquiv A B f)
  := lemContrProp (isEquiv A B f)
       (λ e. retractContr
               ((r : rinv A B f) × rcoh1 A B f r)
               (isEquiv A B f)
               (rcohEquivRetract A B f)
               (contrSig (rinv A B f) (rcoh1 A B f)
                 (rinvContr A B f e)
                 (rcoh1Contr A B f e)));


-- This lets us implement local-global looping:

rotIsEquiv (A : U) (h : Ω (A → A) (λ x. x)) (i : I)
  : isEquiv A A (λ x. h i x)
  := lemPropOver
       (A → A)
       (isEquiv A A)
       (isPropIsEquiv A A)
       (λ x. x)
       (λ x. x)
       (λ i x. h i x)
       (idEquiv A).2
       (idEquiv A).2
       i;

rotEquiv (A : U) (h : Ω (A → A) (λ x. x))
  : idEquiv A = idEquiv A
  := λ i. (h i, rotIsEquiv A h i);

global (A : U) (h : Ω (A → A) (λ x. x))
  : Ω² U A
  := λ i j. Glue A [i=0. (A, idEquiv A);
                    i=1. (A, idEquiv A);
                    j=0. (A, rotEquiv A h i
                             -- h i,
                             -- (λ x. h ⁻¹ i x),
                             -- (λ x. lemma1 A h x i),
                             -- (λ x. lemma2 A h x i),
                             -- (λ x. lemma3 A h x i)
                             );
                    j=1. (A, idEquiv A)];

local (A : U) (H : Ω² U A) : Ω (A → A) (λ x. x)
  := λ i x. hcom 1 0
              [i=0 k. coe 0 k (j. A) x;
               i=1 k. coe 0 k (j. A) x]
              (coe 0 1 (j. H i j) x);

globalS² (A : U) (h : Ω (A → A) (λ x. x))
  : S² → U
  := λ [ base2. A
       ; loop2 i j. global A h i j
       ];

HopfS² : S² → U := globalS² S¹ (λ i x. rotLoop x i);

windingS¹ : Ω S¹ base1 → ℤ :=
  λ p. coe 0 1 (i. helix (p i)) (pos zero);

windingS² : Ω² S² base2 → ℤ :=
  λ p. windingS¹ (λ i. coe 0 1 (j. HopfS² (p i j)) base1);

higher inductive J₃S¹ :=
  j3s1-base
| j3s1-loop1 (i : I)
    [i=0. j3s1-base
    ;i=1. j3s1-base]
| j3s1-loop2 (i j : I)
    [i=0. j3s1-loop1 j
    ;i=1. j3s1-loop1 j
    ;j=0. j3s1-loop1 i
    ;j=1. j3s1-loop1 i]
| j3s1-loop3 (i j k : I)
    [i=0. j3s1-loop2 j k
    ;i=1. j3s1-loop2 j k
    ;j=0. j3s1-loop2 i k
    ;j=1. j3s1-loop2 i k
    ;k=0. j3s1-loop2 i j
    ;k=1. j3s1-loop2 i j];

-- cheating!
loopsJ₃S¹ : (x : J₃S¹) → Ω J₃S¹ x := λ[
  j3s1-base. λ l. j3s1-loop1 l;
  j3s1-loop1 i. λ l. j3s1-loop2 i l;
  j3s1-loop2 i j. λ l. j3s1-loop3 i j l;
  j3s1-loop3 i j k. ?_ -- TODO should 2-truncate
];

localJ₃S¹ : Ω (J₃S¹ → J₃S¹) (λ x. x) :=
  λ i x. loopsJ₃S¹ x i;

w22' : Ω (Ω² S² base2) (λ a b. loop2 a b) :=
  λ j a b.
    hcom 0 1
      [j=0 i. loop2 a b;
       j=1 i. loop2 a b;
       a=0 i. loop2 i j;
       a=1 i. loop2 i j;
       b=0 i. loop2 i j;
       b=1 i. loop2 i j]
      (loop2 a b);

dsqInv (A : U) (x y : A) (p : x = y) (r : p = p) : Ω² A x
  := J A x (λ y p. p = p → Ω² A x)
       (λ r. r)
       y p r;

w22 : Ω³ S² base2 :=
  dsqInv (Ω S² base2) refl refl (λ i j. loop2 i j)
    w22';

toJ₃S¹ : Ω S² base2 → J₃S¹ :=
  λ p. coe 0 1 (i. globalS² J₃S¹ localJ₃S¹ (p i)) j3s1-base;

step2 : Ω² J₃S¹ j3s1-base :=
  λ i j. toJ₃S¹ (λ k. w22 i j k);

-- inspired by connection-both (maybe there is a better way?)
ccube (A : U) (x : A) (p : Ω² A x) : p ={i. p i ={j. p i j = p i j} p i} p
  := let pface (m k : I) : Ω A x
       := λ l. hcom 1 m
                 [ k=0 _. p 1 l
                 ; k=1 k. p k l
                 ; l=0 _. x
                 ; l=1 _. x
                 ]
                 (p 1 l);
     let qface (m k : I) : Ω A x
       := λ l. hcom 0 m
                 [ k=0 _. p 1 l
                 ; k=1 k. p k l
                 ; l=0 _. x
                 ; l=1 _. x
                 ]
                 (p 1 l);
    λ i j k.
      hcom 0 1 [
        i=0 l. pface j l k;
        i=1 l. qface j l k;
        j=0 l. pface i l k;
        j=1 l. qface i l k;
        k=0 _. p i j;
        k=1 _. p i j]
        (p i j);

toS² : J₃S¹ → S² := λ[
  j3s1-base. base2;
  j3s1-loop1 i. base2;
  j3s1-loop2 i j. loop2 i j;
  j3s1-loop3 i j k. ccube S² base2 (λ i j. loop2 i j) i j k
];

step3 : Ω² S² base2 :=
  λ i j. toS² (step2 i j);

brunerie : ℤ :=
  windingS² step3;
