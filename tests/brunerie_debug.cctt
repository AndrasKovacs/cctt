
-- Debugging version of brunerie with checked nfs


{-
Cubical/Experiments/Z-Cohomology benchmarks
-}


--------------------------------------------------------------------------------

isIso (A B : U)(f : A → B) : U :=
    (g    : B → A)
  × (linv : (x : A) → x = g (f x))
  × (rinv : (x : B) → f (g x) = x);

isEquiv (A B : U)(f : A → B) : U :=
    (g    : B → A)
  × (linv : (x : A) → x = g (f x))
  × (rinv : (x : B) → f (g x) = x)
  × (coh  : (x : A) → refl ={i. f (linv x i) = f x} (rinv (f x)));

coeIsEquiv (A : I → U)(r r' : I) : isEquiv (A r) (A r') (λ x. coe r r' A x) :=
  let f'    (i : I)(x : A r)        : A i := coe r i A x;
  let g'    (i : I)(x : A i)        : A r := coe i r A x;
  let linv' (i : I)(x : A r)(j : I) : A r := hcom r i (A r) [j=0 k. x; j=1 k. coe k r A (coe r k A x)] x;
  let rinv' (i : I)(x : A i)(j : I) : A i := hcom i r (A i) [j=0 k. coe k i A (coe i k A x); j=1 k. x] x;

  ( λ x. g' r' x
  , λ x j. linv' r' x j
  , λ x j. rinv' r' x j
  , λ x l k. com r r' A
                      [k=0 i. f' i (linv' i x l)
                      ;k=1 i. f' i x
                      ;l=0 i. f' i x
                      ;l=1 i. rinv' i (f' i x) k]
                      x
  );

equiv (A B : U) : U :=
  (f : A → B) × isEquiv A B f;

iso (A B : U) : U := (f : A → B) × isIso A B f;

idEquiv (A : U) : equiv A A :=
  (λ x. x, λ x. x, λ x _. x, λ x _. x, λ x _ _. x);

ua (A B : U)(f : equiv A B) : A = B :=
  λ i. Glue B [i=0. (A, f); i=1. (B, idEquiv B)];

--------------------------------------------------------------------------------


higher inductive S1 :=
    base1
  | loop1 (i : I) [i=0. base1; i=1. base1];


higher inductive S2 :=
  base2
| loop2 (i j : I) [i=0. base2
                  ;i=1. base2
                  ;j=0. base2
                  ;j=1. base2];

higher inductive S3 :=
  base3
| loop3 (i j k : I) [ i=0. base3
                     ;i=1. base3
                     ;j=0. base3
                     ;j=1. base3
                     ;k=0. base3
                     ;k=1. base3];

higher inductive join (A B : U) :=
  inl A
| inr B
| push (a : A) (b : B) (i : I) [ i = 0. inl a
                               ; i = 1. inr b ];

s3-join-cnx (b : S1)(i m : I) : join S1 S1 :=
  hcom 0 i (join S1 S1) [
    m=0 _. inl base1;
    m=1 i. push base1 b i]
   (inl base1);

s3-join-k01 (i j m : I) : join S1 S1 :=
  hcom 1 i [
    j=0 i. s3-join-cnx base1 i m;
    j=1 i. s3-join-cnx base1 i m;
    m=0 _. inl base1;
    m=1 i. push (loop1 j) base1 i]
  (s3-join-cnx base1 1 m);

s3-join-k01NF (i j m : I) : join S1 S1 :=
hcom 1 i (join S1 S1) [j = 0 i. hcom 0 i (join S1 S1) [m = 0 _. inl
base1; m = 1 i. push base1 base1 i] (inl base1); j = 1 i. hcom 0 i (join S1 S1)
[m = 0 _. inl base1; m = 1 i. push base1 base1 i] (inl base1); m = 0 _. inl
base1; m = 1 i. push (loop1 j) base1 i] (hcom 0 1 (join S1 S1) [m = 0 _. inl
base1; m = 1 i. push base1 base1 i] (inl base1));

s3-join-k01NFOK : s3-join-k01NF = s3-join-k01 := refl;

goalcube (i j k m : I) : join S1 S1 :=
  hcom 1 m (join S1 S1) [
    i=1. s3-join-cnx (loop1 k) i;
    j=0. s3-join-cnx (loop1 k) i;
    j=1. s3-join-cnx (loop1 k) i;
    i=0. s3-join-k01 i j;
    k=0. s3-join-k01 i j;
    k=1. s3-join-k01 i j
    ]
    (push (loop1 j) (loop1 k) i);

goalcubeNF (i j k m : I) : join S1 S1 :=
hcom 1 m (join S1 S1) [i = 1 l. hcom 0 1 (join S1 S1) [l = 0 _. inl
base1; l = 1 i. push base1 (loop1 k) i] (inl base1); j = 0 l. hcom 0 i (join S1
S1) [l = 0 _. inl base1; l = 1 i. push base1 (loop1 k) i] (inl base1); j = 1
l. hcom 0 i (join S1 S1) [l = 0 _. inl base1; l = 1 i. push base1 (loop1 k) i]
(inl base1); i = 0 l. hcom 1 0 (join S1 S1) [j = 0 i. hcom 0 i (join S1 S1) [l =
0 _. inl base1; l = 1 i. push base1 base1 i] (inl base1); j = 1 i. hcom 0 i
(join S1 S1) [l = 0 _. inl base1; l = 1 i. push base1 base1 i] (inl base1); l =
0 _. inl base1; l = 1 i. push (loop1 j) base1 i] (hcom 0 1 (join S1 S1) [l = 0
_. inl base1; l = 1 i. push base1 base1 i] (inl base1)); k = 0 l. hcom 1 i (join
S1 S1) [j = 0 i. hcom 0 i (join S1 S1) [l = 0 _. inl base1; l = 1 i. push base1
base1 i] (inl base1); j = 1 i. hcom 0 i (join S1 S1) [l = 0 _. inl base1; l = 1
i. push base1 base1 i] (inl base1); l = 0 _. inl base1; l = 1 i. push (loop1 j)
base1 i] (hcom 0 1 (join S1 S1) [l = 0 _. inl base1; l = 1 i. push base1 base1
i] (inl base1)); k = 1 l. hcom 1 i (join S1 S1) [j = 0 i. hcom 0 i (join S1 S1)
[l = 0 _. inl base1; l = 1 i. push base1 base1 i] (inl base1); j = 1 i. hcom 0 i
(join S1 S1) [l = 0 _. inl base1; l = 1 i. push base1 base1 i] (inl base1); l =
0 _. inl base1; l = 1 i. push (loop1 j) base1 i] (hcom 0 1 (join S1 S1) [l = 0
_. inl base1; l = 1 i. push base1 base1 i] (inl base1))] (push (loop1 j) (loop1
k) i);

goalcubeNFOK : goalcubeNF = goalcube := refl;

e : S3 → join S1 S1 := λ[
  base3. inl base1;
  loop3 i j k. goalcube i j k 0
];

eNF : S3 → join S1 S1 :=
λ _. case @0 (_. join S1 S1) [base3. inl base1; loop3 i j k. hcom 1 0 (join S1
S1) [i = 1 l. hcom 0 1 (join S1 S1) [l = 0 _. inl base1; l = 1 i. push base1
(loop1 k) i] (inl base1); j = 0 l. hcom 0 i (join S1 S1) [l = 0 _. inl base1; l
= 1 i. push base1 (loop1 k) i] (inl base1); j = 1 l. hcom 0 i (join S1 S1) [l =
0 _. inl base1; l = 1 i. push base1 (loop1 k) i] (inl base1); i = 0 l. hcom 1 0
(join S1 S1) [j = 0 i. hcom 0 i (join S1 S1) [l = 0 _. inl base1; l = 1 i. push
base1 base1 i] (inl base1); j = 1 i. hcom 0 i (join S1 S1) [l = 0 _. inl base1;
l = 1 i. push base1 base1 i] (inl base1); l = 0 _. inl base1; l = 1 i. push
(loop1 j) base1 i] (hcom 0 1 (join S1 S1) [l = 0 _. inl base1; l = 1 i. push
base1 base1 i] (inl base1)); k = 0 l. hcom 1 i (join S1 S1) [j = 0 i. hcom 0 i
(join S1 S1) [l = 0 _. inl base1; l = 1 i. push base1 base1 i] (inl base1); j =
1 i. hcom 0 i (join S1 S1) [l = 0 _. inl base1; l = 1 i. push base1 base1 i]
(inl base1); l = 0 _. inl base1; l = 1 i. push (loop1 j) base1 i] (hcom 0 1
(join S1 S1) [l = 0 _. inl base1; l = 1 i. push base1 base1 i] (inl base1)); k =
1 l. hcom 1 i (join S1 S1) [j = 0 i. hcom 0 i (join S1 S1) [l = 0 _. inl base1;
l = 1 i. push base1 base1 i] (inl base1); j = 1 i. hcom 0 i (join S1 S1) [l = 0
_. inl base1; l = 1 i. push base1 base1 i] (inl base1); l = 0 _. inl base1; l =
1 i. push (loop1 j) base1 i] (hcom 0 1 (join S1 S1) [l = 0 _. inl base1; l = 1
i. push base1 base1 i] (inl base1))] (push (loop1 j) (loop1 k) i)];

eNFOK : e = eNF := refl;

eInvAux2 : S1 → refl ={_. base3 = base3} refl := λ[
  base1.   λ _ _. base3;
  loop1 i. λ j k. loop3 i j k
];

eInvAux2NF : S1 → refl ={_. base3 = base3} refl :=
λ _. case @0 (_. (λ {base3} {base3} _. base3) ={_. base3 ={_. S3} base3} (λ
{base3} {base3} _. base3)) [base1. λ {λ {base3} {base3} _. base3} {λ {base3}
{base3} _. base3} _ {base3} {base3} _. base3; loop1 i. λ {λ {base3} {base3}
_. base3} {λ {base3} {base3} _. base3} j {base3} {base3} k. loop3 i j k];

eInvAux2NFOK : eInvAux2NF = eInvAux2 := refl;

eInvAux (x : S1) : S1 → base3 = base3 := λ[
  base1. λ _. base3;
  loop1 i. eInvAux2 x i
];

eInvAuxNF :  (x : S1) → S1 → base3 = base3 :=
λ x _. case @1 (_. base3 ={_. S3} base3) [base1. λ {base3} {base3} _. base3;
loop1 i. case x (_. ((λ {base3} {base3} _. base3) ={_. base3 ={_. S3} base3} (λ
{base3} {base3} _. base3))) [base1. λ {λ {base3} {base3} _. base3} {λ {base3}
{base3} _. base3} _ {base3} {base3} _. base3; loop1 i. λ {λ {base3} {base3}
_. base3} {λ {base3} {base3} _. base3} j {base3} {base3} k. loop3 i j k] {λ
{base3} {base3} _. base3} {λ {base3} {base3} _. base3} i];

eInvAuxNFOK : eInvAuxNF = eInvAux := refl;

eInv : join S1 S1 → S3 := λ[
  inl x. base3;
  inr y. base3;
  push x y i. eInvAux x y i
];

eInvNF : join S1 S1 → S3 :=
λ _. case @0 (_. S3) [inl x. base3; inr y. base3; push x y i. case y (_. (base3
={_. S3} base3)) [base1. λ {base3} {base3} _. base3; loop1 i. case x (_. ((λ
{base3} {base3} _. base3) ={_. base3 ={_. S3} base3} (λ {base3} {base3}
_. base3))) [base1. λ {λ {base3} {base3} _. base3} {λ {base3} {base3} _. base3}
_ {base3} {base3} _. base3; loop1 i. λ {λ {base3} {base3} _. base3} {λ {base3}
{base3} _. base3} j {base3} {base3} k. loop3 i j k] {λ {base3} {base3} _. base3}
{λ {base3} {base3} _. base3} i] {base3} {base3} i];

eInvNFOK : eInvNF = eInv := refl;

merid : S1 → base2 = base2 := λ[
  base1. refl;
  loop1 i. λ j. loop2 i j];

meridNF : S1 → base2 = base2 :=
λ _. case @0 (_. base2 ={_. S2} base2) [base1. λ {base2} {base2} _. base2; loop1
i. λ {base2} {base2} j. loop2 i j];

meridNFOK : meridNF = merid := refl;

alpha : join S1 S1 → S2 := λ[
  inl _. base2;
  inr _. base2;
  push x y i. (merid y ∙ merid x) i
];

alphaNF : join S1 S1 → S2 :=
λ _. case @0 (_. S2) [inl _. base2; inr _. base2; push x y i. hcom 0 1 S2 [i = 0
_. base2; i = 1 j. case x (_. (base2 ={_. S2} base2)) [base1. λ {base2} {base2}
_. base2; loop1 i. λ {base2} {base2} j. loop2 i j] {base2} {base2} j] (case y
(_. (base2 ={_. S2} base2)) [base1. λ {base2} {base2} _. base2; loop1 i. λ
{base2} {base2} j. loop2 i j] {base2} {base2} i)];

alphaNFOK : alphaNF = alpha := refl;

ptType : U := (A : U) * A;
pt (A : ptType) : A.1 := A.2;
joinpt (A : ptType) (B : U) : ptType := (join A.1 B,inl (pt A));

S1pt : ptType := (S1,base1);
S2pt : ptType := (S2,base2);
S3pt : ptType := (S3,base3);

Omega (A : ptType) : ptType := (pt A = pt A, refl);
Omega2 (A : ptType) : ptType := Omega (Omega A);
Omega3 (A : ptType) : ptType := Omega2 (Omega A);

Omega3NF : (A : ptType) → ptType :=
λ A. ((λ {λ {A.2} {A.2} _. A.2} {λ {A.2} {A.2} _. A.2} _ {A.2} {A.2} _. A.2)
={_. (λ {A.2} {A.2} _. A.2) ={_. A.2 ={_. A.A} A.2} (λ {A.2} {A.2} _. A.2)} (λ
{λ {A.2} {A.2} _. A.2} {λ {A.2} {A.2} _. A.2} _ {A.2} {A.2} _. A.2), λ {λ {λ
{A.2} {A.2} _. A.2} {λ {A.2} {A.2} _. A.2} _ {A.2} {A.2} _. A.2} {λ {λ {A.2}
{A.2} _. A.2} {λ {A.2} {A.2} _. A.2} _ {A.2} {A.2} _. A.2} _ {λ {A.2} {A.2}
_. A.2} {λ {A.2} {A.2} _. A.2} _ {A.2} {A.2} _. A.2);

Omega3NFOK : Omega3NF = Omega3 := refl;

mapOmegaRefl (A : ptType) (B : U) (h : A.1 → B) (p : (Omega A).1) :
  (Omega (B, h (pt A))).1 := λ i. h (p i);

mapOmegaRefl3 (A : ptType) (B : U) (h : A.1 → B) (p : (Omega3 A).1) :
  (Omega3 (B, h (pt A))).1 := λ i j k. h (p i j k);

connection-both (A : U)(p : I → A)(rhs : A)(q : p 1 = rhs) (i j : I) : A :=
  let pface (m k : I) : A := hcom 1 m [k=0 _. p 1; k=1. p] (p 1);
  let qface (m k : I) : A := hcom 0 m [k=0 _. p 1; k=1. q] (p 1);
  hcom 0 1 [
    i=0. pface j;
    i=1. qface j;
    j=0. pface i;
    j=1. qface i
    ]
    (p 1);

connection-bothNF (A : U)(p : I → A)(rhs : A)(q : p 1 = rhs) (i j : I) : A :=
hcom 0 1 A [i = 0 k. hcom 1 j A [k = 0 _. p 1; k = 1 l. p l] (p
1); i = 1 k. hcom 0 j A [k = 0 _. p 1; k = 1 l. q {p 1} {rhs} l] (p 1); j = 0
k. hcom 1 i A [k = 0 _. p 1; k = 1 l. p l] (p 1); j = 1 k. hcom 0 i A [k = 0
_. p 1; k = 1 l. q {p 1} {rhs} l] (p 1)] (p 1);

connection-bothNFOK : connection-bothNF = connection-both := refl;

rotLoop : (a : S1) → a = a := λ[
  base1.   λ i. loop1 i;
  loop1 i. λ j. connection-both S1 (λ i. loop1 i) base1 (λ i. loop1 i) i j
  ];

rotLoopNF : (a : S1) → a = a :=
λ a. case a (a. a ={_. S1} a) [base1. λ {base1} {base1} i. loop1 i; loop1 i. λ
{loop1 i} {loop1 i} j. hcom 0 1 S1 [i = 0 k. hcom 1 j S1 [k = 0 _. base1; k = 1
l. loop1 l] base1; i = 1 k. hcom 0 j S1 [k = 0 _. base1; k = 1 l. loop1 l]
base1; j = 0 k. hcom 1 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; j = 1
k. hcom 0 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1] base1];

rotLoopOK : rotLoop = rotLoopNF := refl;

unrotLoop (a : S1) : a = a := (rotLoop a)⁻¹;

unrotLoopNF (a : S1) : a = a :=
λ {a} {a} i. hcom 0 1 S1 [i = 0 j. case a (a. (a ={_. S1} a)) [base1. λ
{base1} {base1} i. loop1 i; loop1 i. λ {loop1 i} {loop1 i} j. hcom 0 1 S1 [i = 0
k. hcom 1 j S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; i = 1 k. hcom 0 j S1 [k
= 0 _. base1; k = 1 l. loop1 l] base1; j = 0 k. hcom 1 i S1 [k = 0 _. base1; k =
1 l. loop1 l] base1; j = 1 k. hcom 0 i S1 [k = 0 _. base1; k = 1 l. loop1 l]
base1] base1] {a} {a} j; i = 1 _. a] a;

unrotLoopNFOK : unrotLoopNF = unrotLoop := refl;

rot : S1 → S1 → S1 := λ[
  base1. λ y. y;
  loop1 i. λ y. rotLoop y i
  ];

rotNF : S1 → S1 → S1 :=
λ _. case @0 (_. S1 → S1) [base1. λ y. y; loop1 i. λ y. case y (a. (a ={_. S1}
a)) [base1. λ {base1} {base1} i. loop1 i; loop1 i. λ {loop1 i} {loop1 i} j. hcom
0 1 S1 [i = 0 k. hcom 1 j S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; i = 1
k. hcom 0 j S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; j = 0 k. hcom 1 i S1 [k
= 0 _. base1; k = 1 l. loop1 l] base1; j = 1 k. hcom 0 i S1 [k = 0 _. base1; k =
1 l. loop1 l] base1] base1] {y} {y} i];

rotNFOK : rotNF = rot := refl;

-- TODO: redtt/cool/Hopf
square : (λ _. S1) ={_. S1 = S1} (λ _. S1) := λ i j.
   Glue S1 [i = 0. (S1, idEquiv S1)
           ;i = 1. (S1, idEquiv S1)
           ;j = 0. (S1, (λ x. rotLoop x i), (λ x. unrotLoop x i), ?_)
           ;j = 1. (S1, idEquiv S1)];

squareNF : (λ _. S1) ={_. S1 = S1} (λ _. S1) :=
λ {λ {S1} {S1} _. S1} {λ {S1} {S1} _. S1} i {S1} {S1} j. Glue S1 [i = 0. S1, λ
x. x, λ x. x, λ x {x} {x} _. x, λ x {x} {x} _. x, λ x {λ {x} {x} _. x} {λ {x}
{x} _. x} _ {x} {x} _. x; i = 1. S1, λ x. x, λ x. x, λ x {x} {x} _. x, λ x {x}
{x} _. x, λ x {λ {x} {x} _. x} {λ {x} {x} _. x} _ {x} {x} _. x; j = 0. S1, λ
x. case x (a. (a ={_. S1} a)) [base1. λ {base1} {base1} i. loop1 i; loop1 i. λ
{loop1 i} {loop1 i} j. hcom 0 1 S1 [i = 0 k. hcom 1 j S1 [k = 0 _. base1; k = 1
l. loop1 l] base1; i = 1 k. hcom 0 j S1 [k = 0 _. base1; k = 1 l. loop1 l]
base1; j = 0 k. hcom 1 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; j = 1
k. hcom 0 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1] base1] {x} {x} i, λ
x. hcom 0 1 S1 [i = 0 j. case x (a. (a ={_. S1} a)) [base1. λ {base1} {base1}
i. loop1 i; loop1 i. λ {loop1 i} {loop1 i} j. hcom 0 1 S1 [i = 0 k. hcom 1 j S1
[k = 0 _. base1; k = 1 l. loop1 l] base1; i = 1 k. hcom 0 j S1 [k = 0 _. base1;
k = 1 l. loop1 l] base1; j = 0 k. hcom 1 i S1 [k = 0 _. base1; k = 1 l. loop1 l]
base1; j = 1 k. hcom 0 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1] base1] {x}
{x} j; i = 1 _. x] x, ?_; j = 1. S1, λ x. x, λ x. x, λ x {x} {x} _. x, λ x {x}
{x} _. x, λ x {λ {x} {x} _. x} {λ {x} {x} _. x} _ {x} {x} _. x];

Hopf : S2 → U := λ[
  base2. S1;
  loop2 i j. square i j
];

HopfNF : S2 → U :=
λ _. case @0 (_. U) [base2. S1; loop2 i j. Glue S1 [i = 0. S1, λ x. x, λ x. x, λ
x {x} {x} _. x, λ x {x} {x} _. x, λ x {λ {x} {x} _. x} {λ {x} {x} _. x} _ {x}
{x} _. x; i = 1. S1, λ x. x, λ x. x, λ x {x} {x} _. x, λ x {x} {x} _. x, λ x {λ
{x} {x} _. x} {λ {x} {x} _. x} _ {x} {x} _. x; j = 0. S1, λ x. case x (a. (a
={_. S1} a)) [base1. λ {base1} {base1} i. loop1 i; loop1 i. λ {loop1 i} {loop1
i} j. hcom 0 1 S1 [i = 0 k. hcom 1 j S1 [k = 0 _. base1; k = 1 l. loop1 l]
base1; i = 1 k. hcom 0 j S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; j = 0
k. hcom 1 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; j = 1 k. hcom 0 i S1 [k
= 0 _. base1; k = 1 l. loop1 l] base1] base1] {x} {x} i, λ x. hcom 0 1 S1 [i = 0
j. case x (a. (a ={_. S1} a)) [base1. λ {base1} {base1} i. loop1 i; loop1 i. λ
{loop1 i} {loop1 i} j. hcom 0 1 S1 [i = 0 k. hcom 1 j S1 [k = 0 _. base1; k = 1
l. loop1 l] base1; i = 1 k. hcom 0 j S1 [k = 0 _. base1; k = 1 l. loop1 l]
base1; j = 0 k. hcom 1 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; j = 1
k. hcom 0 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1] base1] {x} {x} j; i = 1
_. x] x, ?_; j = 1. S1, λ x. x, λ x. x, λ x {x} {x} _. x, λ x {x} {x} _. x, λ x
{λ {x} {x} _. x} {λ {x} {x} _. x} _ {x} {x} _. x]];

fibOmega (B : ptType) (P : B.1 → U) (f : P (pt B)) (p : (Omega B).1) : U :=
  f ={i. P (p i)} f;

itFibOmega2 (B : ptType) (P : B.1 → U) (f : P (pt B)) : (Omega2 B).1 → U :=
  fibOmega (Omega B) (fibOmega B P f) refl;

itFibOmega3 (B : ptType) (P : B.1 → U) (f : P (pt B)) : (Omega3 B).1 → U :=
  itFibOmega2 (Omega B) (fibOmega B P f) refl;

itFibOmega3NF (B : ptType) (P : B.1 → U) (f : P (pt B)) : (Omega3 B).1 → U :=
λ p. (λ {λ {f} {f} _. f} {λ {f} {f} _. f} _ {f} {f} _. f) ={i. (λ {f} {f}
_. f) ={i. f ={i. P (p {λ {λ {B.2} {B.2} _. B.2} {λ {B.2} {B.2} _. B.2} _ {B.2}
{B.2} _. B.2} {λ {λ {B.2} {B.2} _. B.2} {λ {B.2} {B.2} _. B.2} _ {B.2} {B.2}
_. B.2} @0 {λ {B.2} {B.2} _. B.2} {λ {B.2} {B.2} _. B.2} @1 {B.2} {B.2} i)} f}
(λ {f} {f} _. f)} (λ {λ {f} {f} _. f} {λ {f} {f} _. f} _ {f} {f} _. f);

itFibOmega3NFOK : itFibOmega3NF = itFibOmega3 := refl;

HopfThree : (Omega3 S2pt).1 → U := itFibOmega3 S2pt Hopf base1;

HopfThreeNF : (Omega3 S2pt).1 → U :=
λ p. (λ {λ {base1} {base1} _. base1} {λ {base1} {base1} _. base1} _ {base1}
{base1} _. base1) ={i. (λ {base1} {base1} _. base1) ={i. base1 ={i. case (p {λ
{λ {base2} {base2} _. base2} {λ {base2} {base2} _. base2} _ {base2} {base2}
_. base2} {λ {λ {base2} {base2} _. base2} {λ {base2} {base2} _. base2} _ {base2}
{base2} _. base2} @0 {λ {base2} {base2} _. base2} {λ {base2} {base2} _. base2}
@1 {base2} {base2} i) (_. U) [base2. S1; loop2 i j. Glue S1 [i = 0. S1, λ x. x,
λ x. x, λ x {x} {x} _. x, λ x {x} {x} _. x, λ x {λ {x} {x} _. x} {λ {x} {x}
_. x} _ {x} {x} _. x; i = 1. S1, λ x. x, λ x. x, λ x {x} {x} _. x, λ x {x} {x}
_. x, λ x {λ {x} {x} _. x} {λ {x} {x} _. x} _ {x} {x} _. x; j = 0. S1, λ x. case
x (a. (a ={_. S1} a)) [base1. λ {base1} {base1} i. loop1 i; loop1 i. λ {loop1 i}
{loop1 i} j. hcom 0 1 S1 [i = 0 k. hcom 1 j S1 [k = 0 _. base1; k = 1 l. loop1
l] base1; i = 1 k. hcom 0 j S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; j = 0
k. hcom 1 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; j = 1 k. hcom 0 i S1 [k
= 0 _. base1; k = 1 l. loop1 l] base1] base1] {x} {x} i, λ x. hcom 0 1 S1 [i = 0
j. case x (a. (a ={_. S1} a)) [base1. λ {base1} {base1} i. loop1 i; loop1 i. λ
{loop1 i} {loop1 i} j. hcom 0 1 S1 [i = 0 k. hcom 1 j S1 [k = 0 _. base1; k = 1
l. loop1 l] base1; i = 1 k. hcom 0 j S1 [k = 0 _. base1; k = 1 l. loop1 l]
base1; j = 0 k. hcom 1 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; j = 1
k. hcom 0 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1] base1] {x} {x} j; i = 1
_. x] x, ?_; j = 1. S1, λ x. x, λ x. x, λ x {x} {x} _. x, λ x {x} {x} _. x, λ x
{λ {x} {x} _. x} {λ {x} {x} _. x} _ {x} {x} _. x]]} base1} (λ {base1} {base1}
_. base1)} (λ {λ {base1} {base1} _. base1} {λ {base1} {base1} _. base1} _
{base1} {base1} _. base1);

HopfThreeNFOK : HopfThreeNF = HopfThree := refl;

higher inductive PostTotalHopf :=
    b (x : S1)
  | l (x : S1) (i j : I)
                     [ i=0. b x
                     ; i=1. b x
                     ; j=0. b (unrotLoop x i)
                     ; j=1. b x ];

-- redtt Hopf rotate-unrotate-loop

tee12 : (x : S2) → Hopf x → PostTotalHopf := λ[
  base2. λ y. b y;
  loop2 i j . λ y.
    hcom 0 1 [
      i=0 _. b y;
      i=1 _. b y;
      j=0 k. b ?_;
      j=1 _. b y]
      (l (unglue y) i j)
];

tee12NF : (x : S2) → Hopf x → PostTotalHopf :=
λ x. case x (x. case x (_. U) [base2. S1; loop2 i j. Glue S1 [i = 0. S1, λ x. x,
λ x. x, λ x {x} {x} _. x, λ x {x} {x} _. x, λ x {λ {x} {x} _. x} {λ {x} {x}
_. x} _ {x} {x} _. x; i = 1. S1, λ x. x, λ x. x, λ x {x} {x} _. x, λ x {x} {x}
_. x, λ x {λ {x} {x} _. x} {λ {x} {x} _. x} _ {x} {x} _. x; j = 0. S1, λ x. case
x (a. (a ={_. S1} a)) [base1. λ {base1} {base1} i. loop1 i; loop1 i. λ {loop1 i}
{loop1 i} j. hcom 0 1 S1 [i = 0 k. hcom 1 j S1 [k = 0 _. base1; k = 1 l. loop1
l] base1; i = 1 k. hcom 0 j S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; j = 0
k. hcom 1 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; j = 1 k. hcom 0 i S1 [k
= 0 _. base1; k = 1 l. loop1 l] base1] base1] {x} {x} i, λ x. hcom 0 1 S1 [i = 0
j. case x (a. (a ={_. S1} a)) [base1. λ {base1} {base1} i. loop1 i; loop1 i. λ
{loop1 i} {loop1 i} j. hcom 0 1 S1 [i = 0 k. hcom 1 j S1 [k = 0 _. base1; k = 1
l. loop1 l] base1; i = 1 k. hcom 0 j S1 [k = 0 _. base1; k = 1 l. loop1 l]
base1; j = 0 k. hcom 1 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; j = 1
k. hcom 0 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1] base1] {x} {x} j; i = 1
_. x] x, ?_; j = 1. S1, λ x. x, λ x. x, λ x {x} {x} _. x, λ x {x} {x} _. x, λ x
{λ {x} {x} _. x} {λ {x} {x} _. x} _ {x} {x} _. x]] → PostTotalHopf) [base2. λ
y. b y; loop2 i j. λ y. hcom 0 1 PostTotalHopf [i = 0 _. b y; i = 1 _. b y; j =
0 k. b ?_; j = 1 _. b y] (l (unglue y) i j)];

tee12NFOK : tee12NF = tee12 := refl;

tee34 : PostTotalHopf → join S1 S1 := λ[
  b x. inl x;
  l x i j. ?_
];

tee : (x : S2) → Hopf x → join S1 S1 :=
  λ x y. tee34 (tee12 x y);

fibContrHopfThree (p : (Omega3 S2pt).1) : HopfThree p := ?_;

h (p : (Omega3 S2pt).1) : (Omega3 (joinpt S1pt S1)).1 :=
  λ i j k. tee (p i j k) (fibContrHopfThree p i j k);


--------------------------------------------------------------------------------
-- B.9 Going back to pi2(S2)

-- 2-Groupoid truncation of S2
higher inductive trS2 :=
    g2inc (a : S2)
  | g2squashC (a b : trS2)
              (p q : a = b)
              (r s : p = q)
              (t u : r = s)
              (i j k l : I)
               [i=0. t j k l
               ;i=1. u j k l
               ;j=0. r k l
               ;j=1. s k l
               ;k=0. p l
               ;k=1. q l
               ;l=0. a
               ;l=1. b];

trS2pt : ptType := (trS2, g2inc base2);


-- Tests
--------------------------------------------------------------------------------

test0To2 : (Omega3 S3pt).1 := λ i j k. loop3 i j k;

f3 : (Omega3 S3pt).1 → (Omega3 (joinpt S1pt S1)).1 :=
  mapOmegaRefl3 S3pt (join S1 S1) e;

test0To3 : (Omega3 (joinpt S1pt S1)).1 := f3 test0To2;

test0To3NF : (Omega3 (joinpt S1pt S1)).1 :=
λ {λ {λ {inl base1} {inl base1} _. inl base1} {λ {inl base1} {inl base1} _. inl
base1} _ {inl base1} {inl base1} _. inl base1} {λ {λ {inl base1} {inl base1}
_. inl base1} {λ {inl base1} {inl base1} _. inl base1} _ {inl base1} {inl base1}
_. inl base1} i {λ {inl base1} {inl base1} _. inl base1} {λ {inl base1} {inl
base1} _. inl base1} j {inl base1} {inl base1} k. hcom 1 0 (join S1 S1) [i = 1
l. hcom 0 1 (join S1 S1) [l = 0 _. inl base1; l = 1 i. push base1 (loop1 k) i]
(inl base1); j = 0 l. hcom 0 i (join S1 S1) [l = 0 _. inl base1; l = 1 i. push
base1 (loop1 k) i] (inl base1); j = 1 l. hcom 0 i (join S1 S1) [l = 0 _. inl
base1; l = 1 i. push base1 (loop1 k) i] (inl base1); i = 0 l. hcom 1 0 (join S1
S1) [j = 0 i. hcom 0 i (join S1 S1) [l = 0 _. inl base1; l = 1 i. push base1
base1 i] (inl base1); j = 1 i. hcom 0 i (join S1 S1) [l = 0 _. inl base1; l = 1
i. push base1 base1 i] (inl base1); l = 0 _. inl base1; l = 1 i. push (loop1 j)
base1 i] (hcom 0 1 (join S1 S1) [l = 0 _. inl base1; l = 1 i. push base1 base1
i] (inl base1)); k = 0 l. hcom 1 i (join S1 S1) [j = 0 i. hcom 0 i (join S1 S1)
[l = 0 _. inl base1; l = 1 i. push base1 base1 i] (inl base1); j = 1 i. hcom 0 i
(join S1 S1) [l = 0 _. inl base1; l = 1 i. push base1 base1 i] (inl base1); l =
0 _. inl base1; l = 1 i. push (loop1 j) base1 i] (hcom 0 1 (join S1 S1) [l = 0
_. inl base1; l = 1 i. push base1 base1 i] (inl base1)); k = 1 l. hcom 1 i (join
S1 S1) [j = 0 i. hcom 0 i (join S1 S1) [l = 0 _. inl base1; l = 1 i. push base1
base1 i] (inl base1); j = 1 i. hcom 0 i (join S1 S1) [l = 0 _. inl base1; l = 1
i. push base1 base1 i] (inl base1); l = 0 _. inl base1; l = 1 i. push (loop1 j)
base1 i] (hcom 0 1 (join S1 S1) [l = 0 _. inl base1; l = 1 i. push base1 base1
i] (inl base1))] (push (loop1 j) (loop1 k) i);

test0To3NFOK : test0To3NF = test0To3 := refl;

f4 : (Omega3 (joinpt S1pt S1)).1 → (Omega3 S2pt).1 :=
  mapOmegaRefl3 (joinpt S1pt S1) S2 alpha;

f4NF : (Omega3 (joinpt S1pt S1)).1 → (Omega3 S2pt).1 :=
λ p {λ {λ {base2} {base2} _. base2} {λ {base2} {base2} _. base2} _ {base2}
{base2} _. base2} {λ {λ {base2} {base2} _. base2} {λ {base2} {base2} _. base2} _
{base2} {base2} _. base2} i {λ {base2} {base2} _. base2} {λ {base2} {base2}
_. base2} j {base2} {base2} k. case (p {λ {λ {inl base1} {inl base1} _. inl
base1} {λ {inl base1} {inl base1} _. inl base1} _ {inl base1} {inl base1} _. inl
base1} {λ {λ {inl base1} {inl base1} _. inl base1} {λ {inl base1} {inl base1}
_. inl base1} _ {inl base1} {inl base1} _. inl base1} i {λ {inl base1} {inl
base1} _. inl base1} {λ {inl base1} {inl base1} _. inl base1} j {inl base1} {inl
base1} k) (_. S2) [inl _. base2; inr _. base2; push x y i. hcom 0 1 S2 [i = 0
_. base2; i = 1 j. case x (_. (base2 ={_. S2} base2)) [base1. λ {base2} {base2}
_. base2; loop1 i. λ {base2} {base2} j. loop2 i j] {base2} {base2} j] (case y
(_. (base2 ={_. S2} base2)) [base1. λ {base2} {base2} _. base2; loop1 i. λ
{base2} {base2} j. loop2 i j] {base2} {base2} i)];

f4NFOK : f4NF = f4 := refl;

test0To4 : (Omega3 S2pt).1 := f4 test0To3;

test0To4Type := (Omega3 S2pt).1;

test0To4NF : (Omega3 S2pt).1 :=
λ {λ {λ {base2} {base2} _. base2} {λ {base2} {base2} _. base2} _ {base2} {base2}
_. base2} {λ {λ {base2} {base2} _. base2} {λ {base2} {base2} _. base2} _ {base2}
{base2} _. base2} i {λ {base2} {base2} _. base2} {λ {base2} {base2} _. base2} j
{base2} {base2} k. hcom 1 0 S2 [i = 1 l. hcom 0 1 S2 [l = 0 _. base2; l = 1
i. hcom 0 1 S2 [i = 0 _. base2; i = 1 j. base2] (loop2 k i)] base2; j = 0
l. hcom 0 i S2 [l = 0 _. base2; l = 1 i. hcom 0 1 S2 [i = 0 _. base2; i = 1
j. base2] (loop2 k i)] base2; j = 1 l. hcom 0 i S2 [l = 0 _. base2; l = 1
i. hcom 0 1 S2 [i = 0 _. base2; i = 1 j. base2] (loop2 k i)] base2; i = 0
l. hcom 1 0 S2 [j = 0 i. hcom 0 i S2 [l = 0 _. base2; l = 1 i. hcom 0 1 S2 [i =
0 _. base2; i = 1 j. base2] base2] base2; j = 1 i. hcom 0 i S2 [l = 0 _. base2;
l = 1 i. hcom 0 1 S2 [i = 0 _. base2; i = 1 j. base2] base2] base2; l = 0
_. base2; l = 1 i. hcom 0 1 S2 [i = 0 _. base2; i = 1 j. loop2 @1 j] base2]
(hcom 0 1 S2 [l = 0 _. base2; l = 1 i. hcom 0 1 S2 [i = 0 _. base2; i = 1
j. base2] base2] base2); k = 0 l. hcom 1 i S2 [j = 0 i. hcom 0 i S2 [l = 0
_. base2; l = 1 i. hcom 0 1 S2 [i = 0 _. base2; i = 1 j. base2] base2] base2; j
= 1 i. hcom 0 i S2 [l = 0 _. base2; l = 1 i. hcom 0 1 S2 [i = 0 _. base2; i = 1
j. base2] base2] base2; l = 0 _. base2; l = 1 i. hcom 0 1 S2 [i = 0 _. base2; i
= 1 j. loop2 @1 j] base2] (hcom 0 1 S2 [l = 0 _. base2; l = 1 i. hcom 0 1 S2 [i
= 0 _. base2; i = 1 j. base2] base2] base2); k = 1 l. hcom 1 i S2 [j = 0 i. hcom
0 i S2 [l = 0 _. base2; l = 1 i. hcom 0 1 S2 [i = 0 _. base2; i = 1 j. base2]
base2] base2; j = 1 i. hcom 0 i S2 [l = 0 _. base2; l = 1 i. hcom 0 1 S2 [i = 0
_. base2; i = 1 j. base2] base2] base2; l = 0 _. base2; l = 1 i. hcom 0 1 S2 [i
= 0 _. base2; i = 1 j. loop2 @1 j] base2] (hcom 0 1 S2 [l = 0 _. base2; l = 1
i. hcom 0 1 S2 [i = 0 _. base2; i = 1 j. base2] base2] base2)] (hcom 0 1 S2 [i =
0 _. base2; i = 1 j. loop2 @1 j] (loop2 k i));

test0To4NFOK : test0To4NF = test0To4 := refl;

f5 : (Omega3 S2pt).1 → (Omega3 (joinpt S1pt S1)).1 := h;

f5NF : (Omega3 S2pt).1 → (Omega3 (joinpt S1pt S1)).1 :=
λ p {λ {λ {inl base1} {inl base1} _. inl base1} {λ {inl base1} {inl base1}
_. inl base1} _ {inl base1} {inl base1} _. inl base1} {λ {λ {inl base1} {inl
base1} _. inl base1} {λ {inl base1} {inl base1} _. inl base1} _ {inl base1} {inl
base1} _. inl base1} i {λ {inl base1} {inl base1} _. inl base1} {λ {inl base1}
{inl base1} _. inl base1} j {inl base1} {inl base1} k. case (case (p {λ {λ
{base2} {base2} _. base2} {λ {base2} {base2} _. base2} _ {base2} {base2}
_. base2} {λ {λ {base2} {base2} _. base2} {λ {base2} {base2} _. base2} _ {base2}
{base2} _. base2} i {λ {base2} {base2} _. base2} {λ {base2} {base2} _. base2} j
{base2} {base2} k) (x. (case x (_. U) [base2. S1; loop2 i j. Glue S1 [i = 0. S1,
λ x. x, λ x. x, λ x {x} {x} _. x, λ x {x} {x} _. x, λ x {λ {x} {x} _. x} {λ {x}
{x} _. x} _ {x} {x} _. x; i = 1. S1, λ x. x, λ x. x, λ x {x} {x} _. x, λ x {x}
{x} _. x, λ x {λ {x} {x} _. x} {λ {x} {x} _. x} _ {x} {x} _. x; j = 0. S1, λ
x. case x (a. (a ={_. S1} a)) [base1. λ {base1} {base1} i. loop1 i; loop1 i. λ
{loop1 i} {loop1 i} j. hcom 0 1 S1 [i = 0 k. hcom 1 j S1 [k = 0 _. base1; k = 1
l. loop1 l] base1; i = 1 k. hcom 0 j S1 [k = 0 _. base1; k = 1 l. loop1 l]
base1; j = 0 k. hcom 1 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; j = 1
k. hcom 0 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1] base1] {x} {x} i, λ
x. hcom 0 1 S1 [i = 0 j. case x (a. (a ={_. S1} a)) [base1. λ {base1} {base1}
i. loop1 i; loop1 i. λ {loop1 i} {loop1 i} j. hcom 0 1 S1 [i = 0 k. hcom 1 j S1
[k = 0 _. base1; k = 1 l. loop1 l] base1; i = 1 k. hcom 0 j S1 [k = 0 _. base1;
k = 1 l. loop1 l] base1; j = 0 k. hcom 1 i S1 [k = 0 _. base1; k = 1 l. loop1 l]
base1; j = 1 k. hcom 0 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1] base1] {x}
{x} j; i = 1 _. x] x, ?_; j = 1. S1, λ x. x, λ x. x, λ x {x} {x} _. x, λ x {x}
{x} _. x, λ x {λ {x} {x} _. x} {λ {x} {x} _. x} _ {x} {x} _. x]] →
PostTotalHopf)) [base2. λ y. b y; loop2 i j. λ y. hcom 0 1 PostTotalHopf [i = 0
_. b y; i = 1 _. b y; j = 0 k. b ?_; j = 1 _. b y] (l (unglue y) i j)] ?_)
(_. join S1 S1) [b x. inl x; l x i j. ?_];

f5NFOK : f5NF = f5 := refl;

f5NF' : (Omega3 S2pt).1 → (Omega3 (joinpt S1pt S1)).1 :=
λ p i j k. case (case (p i j k) (x. (case x (_. U) [
  base2. S1;
  loop2 i j. Glue S1 [i = 0. S1, idEquiv S1; i = 1. S1, idEquiv S1;

j = 0.

S1

, λ x. case x (a. (a ={_. S1} a)) [base1. λ {base1} {base1} i. loop1 i; loop1 i. λ
{loop1 i} {loop1 i} j. hcom 0 1 S1 [i = 0 k. hcom 1 j S1 [k = 0 _. base1; k = 1
l. loop1 l] base1; i = 1 k. hcom 0 j S1 [k = 0 _. base1; k = 1 l. loop1 l]
base1; j = 0 k. hcom 1 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1; j = 1
k. hcom 0 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1] base1] {x} {x} i

, λ x. hcom 0 1 S1 [i = 0 j. case x (a. (a ={_. S1} a)) [base1. λ {base1} {base1}
i. loop1 i; loop1 i. λ {loop1 i} {loop1 i} j. hcom 0 1 S1 [i = 0 k. hcom 1 j S1
[k = 0 _. base1; k = 1 l. loop1 l] base1; i = 1 k. hcom 0 j S1 [k = 0 _. base1;
k = 1 l. loop1 l] base1; j = 0 k. hcom 1 i S1 [k = 0 _. base1; k = 1 l. loop1 l]
base1; j = 1 k. hcom 0 i S1 [k = 0 _. base1; k = 1 l. loop1 l] base1] base1] {x}
{x} j; i = 1 _. x] x

-- , ?_

, ?_

; j = 1. S1, idEquiv S1]] →
PostTotalHopf)) [base2. λ y. b y; loop2 i j. λ y. hcom 0 1 PostTotalHopf [i = 0
_. b y; i = 1 _. b y; j = 0 k. b ?_; j = 1 _. b y] ?_] ?_)
(_. join S1 S1) [b x. inl x; l x i j. ?_];

-- FAIL: impossible in nf
test0To5 : (Omega3 (joinpt S1pt S1)).1 := f5NF' test0To4;

f6 : (Omega3 (joinpt S1pt S1)).1 -> (Omega3 S3pt).1 :=
  mapOmegaRefl3 (joinpt S1pt S1) S3 eInv;

f6NF : (Omega3 (joinpt S1pt S1)).1 -> (Omega3 S3pt).1 :=
λ p {λ {λ {base3} {base3} _. base3} {λ {base3} {base3} _. base3} _ {base3}
{base3} _. base3} {λ {λ {base3} {base3} _. base3} {λ {base3} {base3} _. base3} _
{base3} {base3} _. base3} i {λ {base3} {base3} _. base3} {λ {base3} {base3}
_. base3} j {base3} {base3} k. case (p {λ {λ {inl base1} {inl base1} _. inl
base1} {λ {inl base1} {inl base1} _. inl base1} _ {inl base1} {inl base1} _. inl
base1} {λ {λ {inl base1} {inl base1} _. inl base1} {λ {inl base1} {inl base1}
_. inl base1} _ {inl base1} {inl base1} _. inl base1} i {λ {inl base1} {inl
base1} _. inl base1} {λ {inl base1} {inl base1} _. inl base1} j {inl base1} {inl
base1} k) (_. S3) [inl x. base3; inr y. base3; push x y i. case y (_. (base3
={_. S3} base3)) [base1. λ {base3} {base3} _. base3; loop1 i. case x (_. ((λ
{base3} {base3} _. base3) ={_. base3 ={_. S3} base3} (λ {base3} {base3}
_. base3))) [base1. λ {λ {base3} {base3} _. base3} {λ {base3} {base3} _. base3}
_ {base3} {base3} _. base3; loop1 i. λ {λ {base3} {base3} _. base3} {λ {base3}
{base3} _. base3} j {base3} {base3} k. loop3 i j k] {λ {base3} {base3} _. base3}
{λ {base3} {base3} _. base3} i] {base3} {base3} i];

test0To6 : (Omega3 S3pt).1 := f6 test0To5;

-- f7 : (Omega3 S3pt).1 → (Omega2 trS2pt).1 := pi3S3;

--- test0To7 : (Omega2 trS2pt).1 = f7 test0To6


-- OLD FILE
----------------------------------------------------------------------------------------------------

{-
-- Version of brunerie3 with some undefined just to track down which
-- definitions are used in the computation.
module brunerie4 where

Path (A : U) (a0 a1 : A) : U = PathP (<i> A) a0 a1

compPath (A : U) (a b c : A) (p : Path A a b) (q : Path A b c) : Path A a c =
  <i> hcomp A (p @ i) [ (i =0) -> <j> a, (i = 1) -> q ]

data bool = false | true
data nat = zero | suc (n : nat)

idfun (A : U) (a : A) : A = a

pred : nat -> nat = split
  zero -> zero
  suc n -> n

{- Z is represented as:

  +2 = pos (suc (suc zero))
  +1 = pos (suc zero)
   0 = pos zero
  -1 = neg zero
  -2 = neg (suc zero)

-}
data Z = pos (n : nat) | neg (n : nat)

twoZ : Z = pos (suc (suc zero))
oneZ : Z = pos (suc zero)
zeroZ : Z = pos zero
moneZ : Z = neg zero
mtwoZ : Z = neg (suc zero)

data S1 = base1
        | loop1 <i> [ (i=0) -> base1
                    , (i=1) -> base1 ]

data S2 = base2
        | loop2 <i j> [ (i=0) -> base2
                      , (i=1) -> base2
                      , (j=0) -> base2
                      , (j=1) -> base2]

data S3 = base3
        | loop3 <i j k> [ (i=0) -> base3
                        , (i=1) -> base3
                        , (j=0) -> base3
                        , (j=1) -> base3
                        , (k=0) -> base3
                        , (k=1) -> base3]

loopS1 : U = Path S1 base1 base1
loop : loopS1 = <i> loop1{S1} @ i

-- Pointed types
ptType : U = (A : U) * A
pt (A : ptType) : A.1 = A.2

boolpt : ptType = (bool,true)
S1pt : ptType = (S1,base1)
S2pt : ptType = (S2,base2)
S3pt : ptType = (S3,base3)

ptMap (A B : ptType) : U = (f : A.1 -> B.1) * (Path B.1 (f (pt A)) (pt B))

-- The first 3 loop spaces of a pointed type.
-- TODO: Maybe defined these by induction on n as in experiments/pointed.ctt?
Omega (A : ptType) : ptType = (Path A.1 (pt A) (pt A),<_> pt A)
Omega2 (A : ptType) : ptType = Omega (Omega A)
Omega3 (A : ptType) : ptType = Omega2 (Omega A)

-- Simplified mapOmega when the function is pointed by reflexivity
mapOmegaRefl (A : ptType) (B : U) (h : A.1 -> B) (p : (Omega A).1) :
  (Omega (B, h (pt A))).1 = <i> h (p @ i)

mapOmegaRefl2 (A : ptType) (B : U) (h : A.1 -> B) (p : (Omega2 A).1) :
  (Omega2 (B, h (pt A))).1 = <i j> h (p @ i @ j)
  -- mapOmegaRefl (Omega A) (Omega (B,h (pt A))).1 (mapOmegaRefl A B h) p

mapOmegaRefl3 (A : ptType) (B : U) (h : A.1 -> B) (p : (Omega3 A).1) :
  (Omega3 (B, h (pt A))).1 = <i j k> h (p @ i @ j @ k)
  -- mapOmegaRefl2 (Omega A) (Omega (B,h (pt A))).1 (mapOmegaRefl A B h)


data join (A B : U) = inl (a : A)
                    | inr (b : B)
                    | push (a : A) (b : B) <i> [ (i = 0) -> inl a
                                               , (i = 1) -> inr b ]

pushP (A B : U) (a : A) (b : B) : Path (join A B) (inl a) (inr b) =
  <i> push {join A B} a b @ i

joinpt (A : ptType) (B : U) : ptType = (join A.1 B,inl (pt A))

Square (A : U) (a0 a1 b0 b1 : A)
               (u : Path A a0 a1) (v : Path A b0 b1)
               (r0 : Path A a0 b0) (r1 : Path A a1 b1) : U
  = PathP (<i> (Path A (u @ i) (v @ i))) r0 r1

-- Inspired by Evan's redtt code
goalcube'' : Path (Path (Path (join S1 S1)
                            (inl base1) (inl base1))
                      (<_> inl base1) (<_> inl base1))
                (<_ _> inl base1) (<_ _> inl base1) =
  <i j k> hcomp (join S1 S1)
                (pushP S1 S1 (loop @ j) (loop @ k) @ i)
                [
                  (i=0) -> facek01 @ 1 @ j
                , (i=1) -> <m> pushP S1 S1 base1 (loop @ k) @ -m
                , (j=0) -> <m> pushP S1 S1 base1 (loop @ k) @ i /\ -m
                , (j=1) -> <m> pushP S1 S1 base1 (loop @ k) @ i /\ -m
                , (k=0) -> facek01 @ -i @ j
                , (k=1) -> facek01 @ -i @ j
                ]

  where
  facek01 : PathP (<i> PathP (<j> Path (join S1 S1)
                                       (pushP S1 S1 (loop @ j) base1 @ -i)
                                       (inl base1))
                             (<k> pushP S1 S1 base1 base1 @ -i /\ -k)
                             (<k> pushP S1 S1 base1 base1 @ -i /\ -k))
                  (<j k> pushP S1 S1 base1 base1 @ -k)
                  (<j k> hcomp (join S1 S1)
                               (pushP S1 S1 base1 base1 @ -k)
                               [ (j=0) -> <i> pushP S1 S1 base1 base1 @ -i /\ -k
                               , (j=1) -> <i> pushP S1 S1 base1 base1 @ -i /\ -k
                               , (k=0) -> <i> pushP S1 S1 (loop @ j) base1 @ -i
                               , (k=1) -> <_> inl base1
                               ]) =
   <i j k> hfill (join S1 S1)
                 (pushP S1 S1 base1 base1 @ -k)
                 [ (j=0) -> <i> pushP S1 S1 base1 base1 @ -i /\ -k
                 , (j=1) -> <i> pushP S1 S1 base1 base1 @ -i /\ -k
                 , (k=0) -> <i> pushP S1 S1 (loop @ j) base1 @ -i
                 , (k=1) -> <_> inl base1
                 ] @ i

e : S3 -> join S1 S1 = split
  base3 -> inl base1
  loop3 @ i j k -> goalcube'' @ i @ j @ k

eInvAux2 : S1 -> Path (Path S3 base3 base3) (<_> base3) (<_> base3) = split
  base1 -> <_ _> base3
  loop1 @ i -> <j k> loop3{S3} @ i @ j @ k

eInvAux (x : S1) : S1 -> Path S3 base3 base3 = split
  base1 -> <_> base3
  loop1 @ i -> eInvAux2 x @ i

eInv : join S1 S1 -> S3 = split
  inl x -> base3
  inr y -> base3
  push x y @ i -> eInvAux x y @ i

merid : S1 -> Path S2 base2 base2 = split
  base1 -> <_> base2
  loop1 @ i -> <j> loop2{S2} @ i @ j

foo (x y : S1) : Path S2 base2 base2 =
  compPath S2 base2 base2 base2 (merid y) (merid x)

alpha : join S1 S1 -> S2 = split
  inl x -> base2
  inr y -> base2
  push x y @ i -> foo x y @ i

-- alphaS3 : S3 -> S2 = split
--   base3 -> base2
--   loop3 @ i j k ->
--     hcomp S2 (loop2{S2} @ i @ k)
--       [ (i=0) -> <l> loop2{S2} @ j @ k /\ - l
--       , (i=1) -> <l> loop2{S2} @ j @ k /\ - l
--       , (k=0) -> <_> base2
--       , (k=1) -> <l> loop2{S2} @ j @ l
--       , (j=0) -> <l> loop2{S2} @ i @ k
--       , (j=1) -> <l> loop2{S2} @ i @ k ]

--
Sigma (A : U) (B : A -> U) : U = (x : A) * B x
refl (A : U) (a : A) : Path A a a = <i> a

constSquare (A : U) (a : A) (p : Path A a a) : Square A a a a a p p p p =
  <i j> hcomp A a [ (i = 0) -> <k> p @ (j \/ - k)
                  , (i = 1) -> <k> p @ (j /\ k)
                  , (j = 0) -> <k> p @ (i \/ - k)
                  , (j = 1) -> <k> p @ (i /\ k)]

fiber (A B : U) (f : A -> B) (y : B) : U =
  (x : A) * Path B y (f x)
isContr (A : U) : U = (x : A) * ((y : A) -> Path A x y)
prop (A : U) : U = (a b : A) -> Path A a b
set (A : U) : U = (a b : A) -> prop (Path A a b)
groupoid (A : U) : U = (a b : A) -> set (Path A a b)
twogroupoid (A : U) : U = (a b : A) -> groupoid (Path A a b)
threegroupoid (A : U) : U = (a b : A) -> twogroupoid (Path A a b)

SET : U = (A : U) * set A
GROUPOID : U = (A : U) * groupoid A

isEquiv (A B : U) (f : A -> B) : U = (y : B) -> isContr (fiber A B f y)

equiv (A B : U) : U = (f : A -> B) * isEquiv A B f

contrSingl (A : U) (a b : A) (p : Path A a b) :
  Path ((x : A) * Path A a x) (a,<_>a) (b,p) = <i> (p @ i,<j> p @ i/\j)

idIsEquiv (A : U) : isEquiv A A (idfun A) =
  \(a : A) -> ((a,<_>a),\(z : (x : A) * Path A a x) -> contrSingl A a z.1 z.2)

idEquiv (A : U) : equiv A A = (idfun A,idIsEquiv A)

ua (A B : U) (e : equiv A B) : Path U A B =
  <i> Glue B [ (i = 0) -> (A,e)
             , (i = 1) -> (B,idEquiv B) ]

rotLoop : (a : S1) -> Path S1 a a = split
  base1 -> <i> loop @ i
  loop1 @ i -> constSquare S1 base1 loop @ i

rot : S1 -> S1 -> S1 = split
  base1 -> \(y : S1) -> y
  loop1 @ i -> \(y : S1) -> rotLoop y @ i

isContrIdIsEquiv (A : U) : isContr (isEquiv A A (idfun A)) = (idIsEquiv A,goal)
  where
  goal (q : isEquiv A A (idfun A)) : Path (isEquiv A A (idfun A)) (idIsEquiv A) q =
    undefined

rotIsEquiv_loop_alt_unf : PathP (<i> isEquiv S1 S1 (rot (loop @ i))) (idIsEquiv S1) (idIsEquiv S1) = undefined
  -- <i> \(y : S1) -> hcomp (isEquiv S1 S1 (rot (loop @ i)))
  --           (transGen (<j> isEquiv S1 S1 (rot (loop @ i /\ j))) (-i) (idIsEquiv S1))
  --             [ (i=0) -> <_> idIsEquiv S1
  --             , (i=1) -> <i> (isContrIdIsEquiv S1).2 (transGen (<i> isEquiv S1 S1 (rot (loop @ i))) 0 (idIsEquiv S1)) @ -i] y

rotIsEquiv : (a : S1) -> isEquiv S1 S1 (rot a) = split
   base1 -> idIsEquiv S1
   loop1 @ i -> rotIsEquiv_loop_alt_unf @ i

inv : S1 -> S1 = split
  base1 -> base1
  loop1 @ i -> loop @ -i

rotrotinvloop1 (a : S1) : PathP (<i> Path S1 (rotLoop (rotLoop a @ - i) @ i) a) (<_> a) (<_> a) =
  <i j> hcomp S1 (rotLoop (rotLoop a @ -i \/ j) @ i)
                 [ (i = 0) -> <_> a
                 , (i = 1) -> <k> rotLoop a @ j /\ -k
                 , (j = 0) -> <_> rotLoop (rotLoop a @ - i) @ i
                 , (j = 1) -> <k> rotLoop a @ i /\ -k ]

square : Path (Path U S1 S1) (<_> S1) (<_> S1) =
  <i j> Glue S1 [ (i = 0) -> (S1, idEquiv S1)
                , (i = 1) -> (S1, idEquiv S1)
                , (j = 0) -> (S1, (rot (loop @ i), rotIsEquiv (loop @ i)))
                , (j = 1) -> (S1, idEquiv S1)
                ]

Hopf : S2 -> U = split
  base2 -> S1
  loop2 @ i j -> square @ i @ j

data PostTotalHopf =
    b (x : S1)
  | l (x : S1) <i j> [ (i=0) -> b x
                     , (i=1) -> b x
                     , (j=0) -> b (rot (loop @ -i) x)
                     , (j=1) -> b x ]

tee12 : (x : S2) -> Hopf x -> PostTotalHopf = split
  base2 -> (\ (y : S1) -> b y)
  loop2 @ i j -> (\ (y : Hopf (loop2{S2} @ i @ j)) ->
    hcomp PostTotalHopf
      (l{PostTotalHopf}
        (unglue y S1
          [ (i = 0) -> (S1, idEquiv S1)
          , (i = 1) -> (S1, idEquiv S1)
          , (j = 0) -> (S1, (rot (loop @ i), rotIsEquiv (loop @ i)))
          , (j = 1) -> (S1, idEquiv S1)
          ])
        @ i @ j)
      [ (i=0) -> <_> b y
      , (i=1) -> <_> b y
      , (j=0) -> <k> b (rotrotinvloop1 y @ -i @ k)
      , (j=1) -> <_> b y
      ])

tee34 : PostTotalHopf -> join S1 S1 = split
  b x -> inl x
  l x @ i j ->
    hcomp (join S1 S1) (push{join S1 S1} (rot (loop @ -i) x) x @ j)
      [ (i=0) -> <k> push {join S1 S1} x x @ (j /\ -k)
      , (i=1) -> <k> push {join S1 S1} x x @ (j /\ -k)
      , (j=0) -> <_> inl (rot (loop @ -i) x)
      , (j=1) -> <k> push {join S1 S1} x x @ -k
      ]

tee : (x : S2) -> (Hopf x -> join S1 S1) = \(x : S2) (y : Hopf x) -> tee34 (tee12 x y)

fibOmega (B : ptType) (P : B.1 -> U) (f : P (pt B)) (p : (Omega B).1) : U =
  PathP (<i> P (p @ i)) f f
itFibOmega2 (B : ptType) (P : B.1 -> U) (f : P (pt B)) : (Omega2 B).1 -> U =
  fibOmega (Omega B) (fibOmega B P f) (<_> f)
itFibOmega3 (B : ptType) (P : B.1 -> U) (f : P (pt B)) : (Omega3 B).1 -> U =
  itFibOmega2 (Omega B) (fibOmega B P f) (<_> f)

-- B.8.3 Looping the Hopf fibration

HopfThree : (Omega3 S2pt).1 -> U = itFibOmega3 S2pt Hopf base1

ZSet : set Z = undefined

predZ : Z -> Z = split
  pos u -> auxpredZ u
    where
    auxpredZ : nat -> Z = split
      zero  -> neg zero
      suc n -> pos n
  neg v -> neg (suc v)

sucZ : Z -> Z = split
  pos u -> pos (suc u)
  neg v -> auxsucZ v
    where
    auxsucZ : nat -> Z = split
      zero  -> pos zero
      suc n -> neg n

sucpredZ : (x : Z) -> Path Z (sucZ (predZ x)) x = undefined

ctr (y : Z) : fiber Z Z sucZ y = (predZ y,<i> sucpredZ y @ -i)

contr (y : Z) (y' : fiber Z Z sucZ y) : Path ((x : Z) * Path Z y (sucZ x)) (ctr y) y' = undefined

equivSucZ : isEquiv Z Z sucZ = \(y : Z) -> (ctr y,contr y)

sucPathZ : Path U Z Z = ua Z Z (sucZ,equivSucZ)

-- Covering space of the circle
helix : S1 -> U = split
  base1 -> Z
  loop1 @ i -> sucPathZ @ i

fibContrHopfThree (p : (Omega3 S2pt).1) : HopfThree p = undefined

h (p : (Omega3 S2pt).1) : (Omega3 (joinpt S1pt S1)).1 =
  <i j k> tee (p @ i @ j @ k) (fibContrHopfThree p @ i @ j @ k)


--------------------------------------------------------------------------------
-- B.9 Going back to pi2(S2)

-- 2-Groupoid truncation of S2
data trS2 =
    g2inc (a : S2)
  | g2squashC (a b : trS2)
              (p q : Path trS2 a b)
              (r s : Path (Path trS2 a b) p q)
              (t u : Path (Path (Path trS2 a b) p q) r s)
              <i j k l>
               [ (i=0) -> t @ j @ k @ l
               , (i=1) -> u @ j @ k @ l
               , (j=0) -> r @ k @ l
               , (j=1) -> s @ k @ l
               , (k=0) -> p @ l
               , (k=1) -> q @ l
               , (l=0) -> a
               , (l=1) -> b ]

trS2pt : ptType = (trS2,g2inc base2)

trS2rec (B : U) (bG : twogroupoid B) (f : S2 -> B) : trS2 -> B = split
  g2inc a -> f a
  g2squashC a b p q r s t u @ i j k l ->
    bG (trS2rec B bG f a)
       (trS2rec B bG f b)
       (<m> trS2rec B bG f (p @ m))
       (<m> trS2rec B bG f (q @ m))
       (<m n> trS2rec B bG f (r @ m @ n))
       (<m n> trS2rec B bG f (s @ m @ n))
       (<m n o> trS2rec B bG f (t @ m @ n @ o))
       (<m n o> trS2rec B bG f (u @ m @ n @ o))
       @ i @ j @ k @ l

trS2Trunc : twogroupoid trS2 =
  \(a b : trS2) (p q : Path trS2 a b)
   (r s : Path (Path trS2 a b) p q)
   (t u : Path (Path (Path trS2 a b) p q) r s) ->
    <i j k l> g2squashC{trS2} a b p q r s t u @ i @ j @ k @ l

-- Groupoid truncation
data gTrunc (A : U) =
    ginc (a : A)
  | gsquashC (a b : gTrunc A) (p q : Path (gTrunc A) a b)
             (r s : Path (Path (gTrunc A) a b) p q) <i j k>
               [ (i=0) -> r @ j @ k
               , (i=1) -> s @ j @ k
               , (j=0) -> p @ k
               , (j=1) -> q @ k
               , (k=0) -> a
               , (k=1) -> b ]

gTruncpt (A : ptType) : ptType = (gTrunc A.1,ginc (pt A))

gTruncRec (A B : U) (bG : groupoid B) (f : A -> B) : gTrunc A -> B = split
  ginc a -> f a
  gsquashC a b p q r s @ i j k ->
    bG (gTruncRec A B bG f a)
       (gTruncRec A B bG f b)
       (<m> gTruncRec A B bG f (p @ m))
       (<m> gTruncRec A B bG f (q @ m))
       (<m n> gTruncRec A B bG f (r @ m @ n))
       (<m n> gTruncRec A B bG f (s @ m @ n)) @ i @ j @ k

gTruncGroupoid (A : U) : groupoid (gTrunc A) =
  \(a b : gTrunc A) (p q : Path (gTrunc A) a b) (r s : Path (Path (gTrunc A) a b) p q) ->
    <i j k> gsquashC{gTrunc A} a b p q r s @ i @ j @ k

-- Set truncation
data sTrunc (A : U) =
    sinc (a : A)
  | ssquashC (a b : sTrunc A) (p q : Path (sTrunc A) a b) <i j>
      [ (i=0) -> p @ j
      , (i=1) -> q @ j
      , (j=0) -> a
      , (j=1) -> b ]

sTruncpt (A : ptType) : ptType = (sTrunc A.1,sinc (pt A))

sTruncRec (A B : U) (bS : set B) (f : A -> B) : sTrunc A -> B = split
  sinc a -> f a
  ssquashC a b p q @ i j -> bS (sTruncRec A B bS f a)
                               (sTruncRec A B bS f b)
                               (<k> sTruncRec A B bS f (p @ k))
                               (<k> sTruncRec A B bS f (q @ k)) @ i @ j

setTruncSet (A : U) : set (sTrunc A) =
  \(a b : sTrunc A) (p q : Path (sTrunc A) a b) ->
    <i j> ssquashC{sTrunc A} a b p q @ i @ j

-- B.9.2  Truncated higher Hopf fibration

multTwoAux : (x : S2) -> Path (Path trS2 (g2inc x) (g2inc x)) (<_> g2inc x) (<_> g2inc x) = split
  base2       -> <i j> g2inc (loop2{S2} @ i @ j)
  loop2 @ k l -> <i j>
    -- define a filler with all correct sides but one by defn, then fix the last with the truncation
    hcomp trS2
      (step1 @ k @ i @ j)
      [ (i=0) -> <_> gl @ k @ l
      , (i=1) -> <_> gl @ k @ l
      , (j=0) -> <_> gl @ k @ l
      , (j=1) -> <_> gl @ k @ l
      , (k=0) -> <_> gl @ i @ j
      , (k=1) -> <_> gl @ i @ j
      , (l=0) -> <_> gl @ i @ j
      , (l=1) -> <m>
        trS2Trunc (g2inc base2) (g2inc base2) (<_> g2inc base2) (<_> g2inc base2) gl gl
          (<k i j> step1 @ k @ i @ j) (<_ i j> gl @ i @ j)
          @ m @ k @ i @ j
      ]
    where
    gl : Path (Path trS2 (g2inc base2) (g2inc base2)) (<_> g2inc base2) (<_> g2inc base2) =
      <m n> g2inc (loop2{S2} @ m @ n)

    -- correct boundary except at l=1
    step1 : PathP (<k> Path (Path trS2 (gl @ k @ l) (gl @ k @ l)) (<_> gl @ k @ l) (<_> gl @ k @ l)) gl gl  =
      <k i j>
      hcomp trS2
        (gl @ i @ j)
        [ (i=0) -> <m> gl @ k @ l /\ m
        , (i=1) -> <m> gl @ k @ l /\ m
        , (j=0) -> <m> gl @ k @ l /\ m
        , (j=1) -> <m> gl @ k @ l /\ m
        , (k=0) -> <_> gl @ i @ j
        , (k=1) -> <_> gl @ i @ j
        , (l=0) -> <_> gl @ i @ j
        ]

multTwoTildeAux : (t : trS2) -> Path (Path trS2 t t) (<_> t) (<_> t) = split
  g2inc x -> multTwoAux x
  g2squashC a b p q r s t u @ k l m n -> <i j>
    g2squashC{trS2}
      (multTwoTildeAux a @ i @ j) (multTwoTildeAux b @ i @ j)
      (<k> multTwoTildeAux (p @ k) @ i @ j) (<k> multTwoTildeAux (q @ k) @ i @ j)
      (<k l> multTwoTildeAux (r @ k @ l) @ i @ j) (<k l> multTwoTildeAux (s @ k @ l) @ i @ j)
      (<k l m> multTwoTildeAux (t @ k @ l @ m) @ i @ j) (<k l m> multTwoTildeAux (u @ k @ l @ m) @ i @ j)
      @ k @ l @ m @ n

sick : PathP (<i> PathP (<j> isEquiv trS2 trS2 ((\(t : trS2) -> multTwoTildeAux t @ i @ j))) (idIsEquiv trS2) (idIsEquiv trS2)) (<_> idIsEquiv trS2) (<_> idIsEquiv trS2) = undefined

multTwoEquivAux : PathP (<i> Path (equiv trS2 trS2) (idEquiv trS2) (idEquiv trS2)) (<_> idEquiv trS2) (<_> idEquiv trS2) =
  <i j>
  ( (\(t : trS2) -> multTwoTildeAux t @ i @ j)
  , sick @ i @ j  )

tHopf3 : S3 -> U = split
  base3 -> trS2
  loop3 @ i j k ->
    Glue trS2 [ (i=0) -> (trS2, idEquiv trS2)
              , (i=1) -> (trS2, idEquiv trS2)
              , (j=0) -> (trS2, idEquiv trS2)
              , (j=1) -> (trS2, idEquiv trS2)
              , (k=0) -> (trS2, multTwoEquivAux @ i @ j)
              , (k=1) -> (trS2, idEquiv trS2)]

pi3S3 (p : (Omega3 S3pt).1) : (Omega2 trS2pt).1 =
  <i j> transGen (<k> tHopf3 (p @ j @ k @ i)) 0 (g2inc base2)



twogroupoidGROUPOID : twogroupoid GROUPOID = undefined

groupoidSET : groupoid SET = undefined



--------------------------------------------------------------------------------
-- B.11 Down one more dimension

-- experiment with alternative definitions in place of f8-11. seems much faster.

codeS2 (s : S2) : GROUPOID = (gTrunc (Hopf s), gTruncGroupoid (Hopf s))

codeTruncS2 : trS2 -> GROUPOID = trS2rec GROUPOID twogroupoidGROUPOID codeS2

encodeTruncS2 (p : (Omega trS2pt).1) : gTrunc S1 = transGen (<i> (codeTruncS2 (p @ i)).1) 0 (ginc base1)

codeS1 (s : S1) : SET = (sTrunc (helix s), setTruncSet (helix s))

codeTruncS1 : gTrunc S1 -> SET = gTruncRec S1 SET groupoidSET codeS1

encodeS1 (p : (Omega (gTruncpt S1pt)).1) : sTrunc Z = transGen (<i> (codeTruncS1 (p @ i)).1) 0 (sinc (pos zero))

-- g8-10 replaces f8-11

g8 : (Omega2 trS2pt).1 -> (Omega (gTruncpt S1pt)).1 =
  mapOmegaRefl (Omega trS2pt) (gTrunc S1) encodeTruncS2

g9 : (Omega (gTruncpt S1pt)).1 -> sTrunc Z = encodeS1

g10 : sTrunc Z -> Z = sTruncRec Z Z ZSet (idfun Z)

-- end of experiment

--- tests

test0To2 : (Omega3 S3pt).1 = <i j k> loop3{S3} @ i @ j @ k

f3 : (Omega3 S3pt).1 -> (Omega3 (joinpt S1pt S1)).1 =
  mapOmegaRefl3 S3pt (join S1 S1) e

test0To3 : (Omega3 (joinpt S1pt S1)).1 = f3 test0To2

f4 : (Omega3 (joinpt S1pt S1)).1 -> (Omega3 S2pt).1 =
  mapOmegaRefl3 (joinpt S1pt S1) S2 alpha

test0To4 : (Omega3 S2pt).1 = f4 test0To3

-- Rotating test0To4 seems to make both fibContrHopfThree compute a
-- lot faster and with smaller result.

test0To4_rotijk : (Omega3 S2pt).1 = <i j k> test0To4 @ i @ j @ k
test0To4_rotikj : (Omega3 S2pt).1 = <i j k> test0To4 @ i @ k @ j
test0To4_rotjik : (Omega3 S2pt).1 = <i j k> test0To4 @ j @ i @ k
test0To4_rotjki : (Omega3 S2pt).1 = <i j k> test0To4 @ j @ k @ i
test0To4_rotkij : (Omega3 S2pt).1 = <i j k> test0To4 @ k @ i @ j
test0To4_rotkji : (Omega3 S2pt).1 = <i j k> test0To4 @ k @ j @ i

{- Benchmarks on Anders' Thinkpad (8GB Ram, Core i5 2.2GHz)

> :n fibContrHopfThree test0To4_rotijk
(OUT OF MEMORY)

> :n fibContrHopfThree test0To4_rotikj
#hcomps: 545101
Time: 0m48.477s

> :n fibContrHopfThree test0To4_rotjik
(OUT OF MEMORY)

> :n fibContrHopfThree test0To4_rotjki
#hcomps: 438692
Time: 0m48.684s

> :n fibContrHopfThree test0To4_rotkij
(OUT OF MEMORY)

> :n fibContrHopfThree test0To4_rotkji
(OUT OF MEMORY)

Conclusion: rotjki is the still the best!

-}

f5 : (Omega3 S2pt).1 -> (Omega3 (joinpt S1pt S1)).1 = h

test0To5 : (Omega3 (joinpt S1pt S1)).1 = f5 test0To4

f6 : (Omega3 (joinpt S1pt S1)).1 -> (Omega3 S3pt).1 =
  mapOmegaRefl3 (joinpt S1pt S1) S3 eInv

test0To6 : (Omega3 S3pt).1 = f6 test0To5

f7 : (Omega3 S3pt).1 -> (Omega2 trS2pt).1 = pi3S3

test0To7 : (Omega2 trS2pt).1 = f7 test0To6

foo : (Omega3 S2pt).1 = <i j k> hcomp S2 base2 [ (i=0) -> <l> loop2{S2} @ l @ l
                                               , (i=1) -> <l> loop2{S2} @ l @ l
                                               , (j=0) -> <l> loop2{S2} @ l @ l
                                               , (j=1) -> <l> loop2{S2} @ l @ l
                                               , (k=0) -> <l> loop2{S2} @ l @ l
                                               , (k=1) -> <l> loop2{S2} @ l @ l
                                               ]

test633 : Z = g10 (g9 (g8 (f7 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 test0To2)))))))))))

goo (p : (Omega3 S2pt).1) : Z = g10 (g9 (g8 (f7 (f6 (f5 p)))))

sorghum : (Omega3 S2pt).1 =
  <i0 i1 i2>
  hcomp S2
    (hcomp S2
      (loop2{S2} @ i2 @ i0)
      [ (i0=0) -> <_> base2
      , (i0=1) -> <i3> loop2{S2} @ i1 @ i3
      , (i1=0) -> <_> loop2{S2} @ i2 @ i0
      , (i1=1) -> <_> loop2{S2} @ i2 @ i0
      , (i2=0) -> <i3> loop2{S2} @ i1 @ (i0 /\ i3)
      , (i2=1) -> <i3> loop2{S2} @ i1 @ (i0 /\ i3)
      ])
    [ (i0=0) -> <i4> loop2{S2} @ i1 @ i4
    , (i0=1) -> <i4> loop2{S2} @ i2 @ -i4
    , (i1=0) -> <i4> loop2{S2} @ i2 @ (i0 /\ -i4)
    , (i1=1) -> <i4> loop2{S2} @ i2 @ (i0 /\ -i4)
    , (i2=0) -> <i4> loop2{S2} @ i1 @ (i0 \/ i4)
    , (i2=1) -> <i4> loop2{S2} @ i1 @ (i0 \/ i4)
    ]

blud : (Omega2 trS2pt).1 = f7 (f6 (f5 sorghum))

-- Unfolded test0To4
gum : (Omega3 S2pt).1 =
  <i0 i1 i2>
  hcomp S2
    (hcomp S2
      (loop2{S2} @ i2 @ i0)
      [ (i0=0) -> <_> base2
      , (i0=1) -> <i3> loop2{S2} @ i1 @ i3
      ])
    [ (i0=0) -> <i4>
      hcomp S2
        (hcomp S2
          base2
          [ (i4=1) -> <_> base2
          , (i4=0) -> <_> base2
          ])
        [ (i1=0) -> <i6>
          hcomp S2
            base2
            [ (i6=1) -> <_> base2
            , (i4=1) -> <_> base2
            , (i4=0)(i6=0) -> <_> base2
            ]
        , (i1=1) -> <i6>
          hcomp S2
            base2
            [ (i6=1) -> <_> base2
            , (i4=1) -> <_> base2
            , (i4=0)(i6=0) -> <_> base2
            ]
        , (i4=0) -> <i6>
          hcomp S2
            base2
            [ (i6=1) -> <_> base2
            , (i6=0) -> <i8> loop2{S2} @ i1 @ i8
            ]
        , (i4=1) -> <_> base2
        ]
    , (i0=1) -> <i4>
      hcomp S2
        (loop2{S2} @ i2 @ -i4)
        [ (i4=1) -> <_> base2
        , (i4=0) -> <_> base2
        ]
    , (i1=0) -> <i4>
      hcomp S2
        (loop2{S2} @ i2 @ (i0 /\ -i4))
        [ (i0=0) -> <_> base2
        , (i4=1) -> <_> base2
        , (i0=1)(i4=0) -> <_> base2
        ]
    , (i1=1) -> <i4>
      hcomp S2
        (loop2{S2} @ i2 @ (i0 /\ -i4))
        [ (i0=0) -> <_> base2
        , (i4=1) -> <_> base2
        , (i0=1)(i4=0) -> <_> base2
        ]
    , (i2=0) -> <i4>
      hcomp S2
        (hcomp S2
          base2
          [ (i4=1) -> <_> base2
          , (i4=0) -> <_> base2
          ])
        [ (i0=1) -> <i6>
          hcomp S2
            base2
            [ (i4=1) -> <_> base2
            , (i4=0) -> <_> base2
            ]
        , (i1=0) -> <i6>
          hcomp S2
            base2
            [ (i0=0)(i6=1) -> <_> base2
            , (i4=1) -> <_> base2
            , (i0=1)(i4=0) -> <_> base2
            , (i4=0)(i6=0) -> <_> base2]
        , (i1=1) -> <i6>
          hcomp S2
            base2
            [ (i0=0)(i6=1) -> <_> base2
            , (i4=1) -> <_> base2
            , (i0=1)(i4=0) -> <_> base2
            , (i4=0)(i6=0) -> <_> base2
            ]
        , (i4=0) -> <i6>
          hcomp S2
            base2
            [ (i0=0)(i6=1) -> <_> base2
            , (i0=1) -> <i8> loop2{S2} @ i1 @ i8
            , (i6=0) -> <i8> loop2{S2} @ i1 @ i8
            ]
        , (i4=1) -> <_> base2
        ]
    , (i2=1) -> <i4>
      hcomp S2
        (hcomp S2
          base2
          [ (i4=1) -> <_> base2
          , (i4=0) -> <_> base2
          ])
        [ (i0=1) -> <i6>
          hcomp S2
            base2
            [ (i4=1) -> <_> base2
            , (i4=0) -> <_> base2
            ]
        , (i1=0) -> <i6>
          hcomp S2
            base2
            [ (i0=0)(i6=1) -> <_> base2
            , (i4=1) -> <_> base2
            , (i0=1)(i4=0) -> <_> base2
            , (i4=0)(i6=0) -> <_> base2
            ]
        , (i1=1) -> <i6>
          hcomp S2
            base2
            [ (i0=0)(i6=1) -> <_> base2
            , (i4=1) -> <_> base2
            , (i0=1)(i4=0) -> <_> base2
            , (i4=0)(i6=0) -> <_> base2
            ]
        , (i4=0) -> <i6>
          hcomp S2 base2
            [ (i0=0)(i6=1) -> <_> base2
            , (i0=1) -> <i8> loop2{S2} @ i1 @ i8
            , (i6=0) -> <i8> loop2{S2} @ i1 @ i8
            ]
        , (i4=1) -> <_> base2
        ]
   ]

ntest0To4_rotjki : (Omega3 S2pt).1 =
 <i j k> hcomp S2 (hcomp S2 (loop2{S2} @ i @ j)
                           [ (j=0) -> <_> base2
                           , (j=1) -> <l> loop2{S2} @ k @ l ])
                 [ (j=0) -> <l> hcomp S2 (hcomp S2 base2 [ (l=1) -> <_> base2
                                                         , (l=0) -> <_> base2])
                                         [ (k=0) -> <m> hcomp S2 base2 [ (m=1) -> <_> base2
                                                                       , (l=1) -> <_> base2
                                                                       , (l=0)(m=0) -> <_> base2 ]
                                         , (k=1) -> <m> hcomp S2 base2 [ (m=1) -> <_> base2
                                                                       , (l=1) -> <_> base2
                                                                       , (l=0)(m=0) -> <_> base2 ]
                                         , (l=0) -> <m> hcomp S2 base2 [ (m=1) -> <_> base2
                                                                       , (m=0) -> <n> loop2{S2} @ k @ n ]
                                             , (l=1) -> <_> base2 ]
                 , (j=1) -> <l> hcomp S2 (loop2{S2} @ i @ -l)
                                         [ (l=1) -> <_> base2
                                         , (l=0) -> <_> base2 ]
                 , (k=0) -> <l> hcomp S2 (loop2{S2} @ i @ j /\ -l)
                                         [ (j=0) -> <_> base2
                                         , (l=1) -> <_> base2
                                         , (j=1)(l=0) -> <_> base2 ]
                 , (k=1) -> <l> hcomp S2 (loop2{S2} @ i @ j /\ -l)
                                         [ (j=0) -> <_> base2
                                         , (l=1) -> <_> base2
                                         , (j=1)(l=0) -> <_> base2 ]
                 , (i=0) -> <l> hcomp S2 (hcomp S2 base2 [ (l=1) -> <_> base2
                                                         , (l=0) -> <_> base2 ])
                                         [ (j=1) -> <m> hcomp S2 base2 [ (l=1) -> <_> base2
                                                                       , (l=0) -> <_> base2]
                                         , (k=0) -> <m> hcomp S2 base2 [ (j=0)(m=1) -> <_> base2
                                                                       , (l=1) -> <_> base2
                                                                       , (j=1)(l=0) -> <_> base2
                                                                       , (l=0)(m=0) -> <_> base2]
                                         , (k=1) -> <m> hcomp S2 base2 [ (j=0)(m=1) -> <_> base2
                                                                       , (l=1) -> <_> base2
                                                                       , (j=1)(l=0) -> <_> base2
                                                                       , (l=0)(m=0) -> <_> base2]
                                         , (l=0) -> <m> hcomp S2 base2 [ (j=0)(m=1) -> <_> base2
                                                                       , (j=1) -> <n> loop2{S2} @ k @ n
                                                                       , (m=0) -> <n> loop2{S2} @ k @ n ]
                                         , (l=1) -> <_> base2 ]
                 , (i=1) -> <l> hcomp S2 (hcomp S2 base2 [ (l=1) -> <_> base2
                                                         , (l=0) -> <_> base2])
                                         [ (j=1) -> <_> hcomp S2 base2 [ (l=1) -> <_> base2
                                                                       , (l=0) -> <_> base2]
                                         , (k=0) -> <m> hcomp S2 base2 [ (j=0)(m=1) -> <_> base2
                                                                       , (l=1) -> <_> base2
                                                                       , (j=1)(l=0) -> <_> base2
                                                                       , (l=0)(m=0) -> <_> base2]
                                         , (k=1) -> <m> hcomp S2 base2 [ (j=0)(m=1) -> <_> base2
                                                                       , (l=1) -> <_> base2
                                                                       , (j=1)(l=0) -> <_> base2
                                                                       , (l=0)(m=0) -> <_> base2]
                                         , (l=0) -> <m> hcomp S2 base2 [ (j=0)(m=1) -> <_> base2
                                                                       , (j=1) -> <n> loop2{S2} @ k @ n
                                                                       , (m=0) -> <n> loop2{S2} @ k @ n ]
                                        , (l=1) -> <m> base2 ] ]

-- test63n = loop f6-f3 n times
test631 : Z = g10 (g9 (g8 (f7 (f6 (f3 test0To2)))))
test632 : Z = g10 (g9 (g8 (f7 (f6 (f3 (f6 (f3 test0To2)))))))
test633 : Z = g10 (g9 (g8 (f7 (f6 (f3 (f6 (f3 (f6 (f3 test0To2)))))))))
test634 : Z = g10 (g9 (g8 (f7 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 test0To2)))))))))))
test635 : Z = g10 (g9 (g8 (f7 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 test0To2)))))))))))))
test636 : Z = g10 (g9 (g8 (f7 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 test0To2)))))))))))))))
test637 : Z = g10 (g9 (g8 (f7 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 test0To2)))))))))))))))))
test638 : Z = g10 (g9 (g8 (f7 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 test0To2)))))))))))))))))))
test639 : Z = g10 (g9 (g8 (f7 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 (f6 (f3 test0To2)))))))))))))))))))))


-- Definition of Brunerie
brunerie : Z = g10 (g9 (g8 test0To7))

-- Optimized version using the optimal rotation of test0To4 (?)
brunerie_opt : Z = g10 (g9 (g8 (f7 (f6 (f5 ntest0To4_rotjki)))))


opaque twogroupoidGROUPOID
opaque groupoidSET
opaque fibContrHopfThree

-}