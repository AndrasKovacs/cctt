
-- Basics
----------------------------------------------------------------------------------------------------

isEquiv (A B : U)(f : A → B) : U :=
    (g    : B → A)
  × (linv : (x : A) → x = g (f x))
  × (rinv : (x : B) → f (g x) = x)
  × (coh  : (x : A) → refl ={i. f (linv x i) = f x} (rinv (f x)));

equiv (A B : U) : U :=
  (f : A → B) × isEquiv A B f;

idEquiv (A : U) : equiv A A :=
  (λ x. x, λ x. x, λ x i. x, λ x j. x, λ x k l. x);

ua (A B : U)(f : equiv A B) : A = B :=
  λ i. Glue B [i=0. (A, f); i=1. (B, idEquiv B)];

isIso (A B : U)(f : A → B) : U :=
    (g    : B → A)
  × (linv : (x : A) → x = g (f x))
  × (rinv : (x : B) → f (g x) = x);

iso (A B : U) : U := (f : A → B) × isIso A B f;

isoToEquiv (A B : U)(iso : iso A B) : equiv A B :=
    iso.f
  , iso.g
  , iso.linv
  , ?_
  , ?_;

-- Integers
----------------------------------------------------------------------------------------------------

inductive ℕ := zero | suc ℕ;

num1 := suc zero;
num2 := suc (suc zero);
num3 := suc (suc (suc zero));
num4 := suc (suc (suc (suc zero)));

pred : ℕ → ℕ := λ[
  zero. zero;
  suc n. n];

inductive ℤ := pos ℕ | neg ℕ;

zeroℤ := pos zero;

predℤ : ℤ → ℤ := λ[
  pos u. case u [zero. neg zero; suc n. pos n];
  neg v. neg (suc v)];

sucℤ : ℤ → ℤ := λ[
  pos u. pos (suc u);
  neg v. case v [zero. pos zero; suc n. neg n]];

predsucℤ : (x : ℤ) → x = predℤ (sucℤ x) := λ[
  pos u. refl;
  neg v. case v (v. neg v = predℤ (sucℤ (neg v))) [
    zero. refl;
    suc n. refl
    ]
  ];

sucpredℤ : (x : ℤ) → sucℤ (predℤ x) = x := λ[
  pos u. case u (u. sucℤ (predℤ (pos u)) = pos u) [
    zero.  refl;
    suc n. refl
    ];
  neg v. refl
  ];

sucℤIso : iso ℤ ℤ :=
    λ x. sucℤ x
  , λ x. predℤ x
  , predsucℤ
  , sucpredℤ;

sucPathℤ : ℤ = ℤ :=
  ua ℤ ℤ (isoToEquiv ℤ ℤ sucℤIso);

-- Brunerie
----------------------------------------------------------------------------------------------------

higher inductive S¹ :=
    base1
  | loop1 (i : I) [i=0. base1; i=1. base1];

higher inductive sTrunc (A : U) :=
    sinc (a : A)
  | strunc (a b : sTrunc A) (p q : a = b) (i j : I)
      [i=0. p j
      ;i=1. q j
      ;j=0. a
      ;j=1. b];

higher inductive gTrunc (A : U) :=
    ginc A
  | gtrunc (a b : gTrunc A)(p q : a = b)(r s : p = q)(i j k11 : I)
         [i=0. r j k11
         ;i=1. s j k11
         ;j=0. p k11
         ;j=1. q k11
         ;k11=0. a
         ;k11=1. b];

helix : S¹ → U := λ[
  base1. ℤ;
  loop1 i. sucPathℤ i
];

codeTruncS¹ : gTrunc S¹ → U := λ[
  ginc s. sTrunc (helix s);
  gtrunc a b p q r s i j k. ?_
];


the (A : U)(x : A) := x;

-- g9 : ginc base1 ={_. gTrunc S¹} ginc base1 → sTrunc ℤ :=
--   λ p. coe 0 1 (i. codeTruncS¹ (p i)) (sinc (pos zero));

g9 : (ginc base1) ={_. gTrunc S¹} (ginc base1) → sTrunc ℤ :=
λ p. coe 0 1
   (i. case (p i) (b1. U) [ ginc s. sTrunc (case s (b2. U) [base1. ℤ; loop1 b4. ?_])
                          ; gtrunc a b p q r s i j k. ?_])
(sinc (pos zero));

----------------------------------------------------------------------------------------------------

-- v3 : hcom 0 1 [] (ginc base1) ={_. gTrunc S¹} hcom 0 1 [] (ginc base1) :=
--   λ i. hcom 0 1 [] (ginc (loop1 i));

-- hcom 0 1 (gTrunc S¹) [i = 1 j. ginc base1; i=0 _. ginc base1] (ginc base1);

-- YIELDS TWO DIFFERENT ERRORS, IF WE REMOVE 0=i
v3 : ginc base1 ={_. gTrunc S¹} ginc base1 :=
λ i. hcom 0 1 (gTrunc S¹) [0 = i b5. ginc base1; i = 1 b6. ginc base1]
       (hcom 1 0 (gTrunc S¹) [i = 0 b7. ginc base1]
          (ginc base1));

-- -- -- YIELDS TWO DIFFERENT ERRORS, IF WE REMOVE 0=i
-- v3 : ginc base1 ={_. gTrunc S¹} ginc base1 :=
-- λ i. hcom 0 1 (gTrunc S¹) [
--                     0 = i j. ginc base1
--                   ; i = 1 j. ginc (hcom 1 0 S¹ [j = 0 i. base1; j = 1 i. loop1 i] base1)
--                   ]
--                   (hcom 1 0 (gTrunc S¹) [0 = i j. ginc base1]
--                     (ginc ?_));

-- g9' (i : I):=
--   case (v3 i) (b1. U) [ ginc s. sTrunc (case s (b2. U) [base1. ℤ; loop1 b4. ?_])
--                          ; gtrunc a b p q r s i j k. ?_];

test := g9 v3;
