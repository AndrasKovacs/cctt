
import basics;
import bool;

higher inductive S¹ :=
     base
   | loop (i : I) [i=0. base; i=1. base];

loop' : base = base := λ i. loop i;

test1 := base;

test2 (i : I) : S¹ := loop i;

test3 : loop 0 = base := refl;
test4 : loop 1 = base := refl;

f1 (x : S¹)(A : U)(p : A = A) : U := case x [
  base. A;
  loop i. p i];

F : S¹ → U := λ[
  base. Bool;
  loop i. negPath i];

loopNeqRefl (p : loop' = refl) : Bot :=
  let lem1 : ap F loop' = refl := ap (λ q. ap F q) p;
  let lem2 : false = true := ap (λ p. coe 0 1 p true) lem1;
  falseNeqTrue lem2;

higher inductive List (A : U) :=
    nil
  | cons A (List A);

test5 (A : I → U)(i j : I)(xs : List (A i)) :
  coe i j (k. List (A k)) nil = nil :=
  refl;

test6 (A : I → U)(i j : I)(x : A i)(xs : List (A i)) :
  coe i j (k. List (A k)) (cons x xs) = cons (coe i j A x) (coe i j (k. List (A k)) xs) :=
  refl;

higher inductive Pushout (A B C : U)(f : A → B)(g : A → C) :=
    inl B
  | inr C
  | quot (a : A)(i : I) [i=0. inl (f a); i=1. inr (g a)];

test7 (A B C : U)(f : A → B)(g : A → C) (a : A)(i : I) : Pushout A B C f g
  := quot a i;

higher inductive PropTrunc (A : U) :=
    pt-embed A
  | pt-quot (x y : PropTrunc A)(i : I)[i=0. x; i=1. y];

test8 (A : U)(x : A)(p : pt-embed x ={_. PropTrunc A} pt-embed x)
  := p⁻¹;

test9 (A : I → U)(a : A 0) := coe 0 1 (i. PropTrunc (A i)) (pt-embed a);

test10 (A : I → U)(x y : PropTrunc (A 0))(j : I) : PropTrunc (A 1) :=
  coe 0 1 (i. PropTrunc (A i)) (pt-quot x y j);

test10Nf (A : I → U)(x y : PropTrunc (A 0))(j : I) : PropTrunc (A 1) :=
 pt-quot (coe 0 1 (i. PropTrunc (A i)) x) (coe 0 1 (i. PropTrunc (A i)) y) j;

test10OK : test10 = test10Nf := refl;

higher inductive SetTrunc (A : U) :=
    st-embed A
  | st-quot (x y : SetTrunc A)(p q : x = y)(i j : I)
            [i=0. p j; i=1. q j; j=0. x; j=1. y];

test11 (A : I → U)(x y : SetTrunc (A 0))(p q : x = y)(j k : I)
  : SetTrunc (A 1) :=
  coe 0 1 (i. SetTrunc (A i)) (st-quot x y p q j k);

test11Nf (A : I → U)(x y : SetTrunc (A 0))(p q : x = y)(j k : I) : SetTrunc (A 1) :=
hcom 1 0 (SetTrunc (A 1)) [j = 0 i. hcom 0 i (SetTrunc (A 1))
[k = 0 i. coe @2 1 (i. SetTrunc (A i)) (coe i @2 (i. SetTrunc (A i)) (coe 0 i
(i. SetTrunc (A i)) x)); k = 1 i. coe @2 1 (i. SetTrunc (A i)) (coe i @2
(i. SetTrunc (A i)) (coe 0 i (i. SetTrunc (A i)) y))] (coe i 1 (i. SetTrunc (A
i)) (coe 0 i (i. SetTrunc (A i)) (p {x} {y} k))); j = 1 i. hcom 0 i (SetTrunc (A
1)) [k = 0 i. coe @2 1 (i. SetTrunc (A i)) (coe i @2 (i. SetTrunc (A i)) (coe 0
i (i. SetTrunc (A i)) x)); k = 1 i. coe @2 1 (i. SetTrunc (A i)) (coe i @2
(i. SetTrunc (A i)) (coe 0 i (i. SetTrunc (A i)) y))] (coe i 1 (i. SetTrunc (A
i)) (coe 0 i (i. SetTrunc (A i)) (q {x} {y} k))); k = 0 i. coe i 1 (i. SetTrunc
(A i)) (coe 0 i (i. SetTrunc (A i)) x); k = 1 i. coe i 1 (i. SetTrunc (A i))
(coe 0 i (i. SetTrunc (A i)) y)] (st-quot (coe 0 1 (i. SetTrunc (A i)) x) (coe 0
1 (i. SetTrunc (A i)) y) (λ {coe 0 1 (i. SetTrunc (A i)) x} {coe 0 1
(i. SetTrunc (A i)) y} _. hcom 0 1 (SetTrunc (A 1)) [@2 = 0 i. coe i 1
(i. SetTrunc (A i)) (coe 0 i (i. SetTrunc (A i)) x); @2 = 1 i. coe i 1
(i. SetTrunc (A i)) (coe 0 i (i. SetTrunc (A i)) y)] (coe 0 1 (i. SetTrunc (A
i)) (p {x} {y} @2))) (λ {coe 0 1 (i. SetTrunc (A i)) x} {coe 0 1 (i. SetTrunc (A
i)) y} _. hcom 0 1 (SetTrunc (A 1)) [@2 = 0 i. coe i 1 (i. SetTrunc (A i)) (coe
0 i (i. SetTrunc (A i)) x); @2 = 1 i. coe i 1 (i. SetTrunc (A i)) (coe 0 i
(i. SetTrunc (A i)) y)] (coe 0 1 (i. SetTrunc (A i)) (q {x} {y} @2))) j k);

test11OK : test11 = test11Nf := refl;


-- Simple incoherent HIT examples

higher inductive CohTest (b : Bool) :=
  ct-quot (f : I → CohTest b)(i : I) [i=0. f 0; i=1. f 1];

test12 (b : I → Bool)(f : I → CohTest (b 0))(i : I) : CohTest (b 1) :=
  coe 0 1 (i. CohTest (b i)) (ct-quot f i);

test12NF (b : I → Bool)(f : I → CohTest (b 0))(i : I) : CohTest (b 1) :=
hcom 1 0 (CohTest (b 1)) [i = 0 i. coe i 1 (i. CohTest (b i)) (coe 0 i (i. CohTest (b i)) (f 0)); i = 1 i. coe i 1 (i. CohTest (b i)) (coe 0 i (i. CohTest (b i)) (f 1))] (ct-quot (λ _. coe 0 1 (i. CohTest (b i)) (f @1)) i);

test12NFOK : test12 = test12NF := refl;

--------------------------------------------------------------------------------

higher inductive CohTest2 (A : U) :=
  ct2-quot (f : A → CohTest2 A)(x : A)(i : I)[i=0. f x];

test13 (A : I → U)(f : A 0 → CohTest2 (A 0))(x : A 0)(i : I) :=
  coe 0 1 (i. CohTest2 (A i)) (ct2-quot f x i);

test13NF (A : I → U)(f : A 0 → CohTest2 (A 0))(x : A 0)(i : I) : CohTest2 (A 1) :=
hcom 1 0 (CohTest2 (A 1)) [i = 0 i. coe i 1 (i. CohTest2 (A i)) (coe
0 i (j. CohTest2 (A j)) (f (coe i 0 A (coe 0 i A x))))] (ct2-quot (λ _. coe 0 1
(j. CohTest2 (A j)) (f (coe 1 0 A @3))) (coe 0 1 A x) i);

test13OK : test13 = test13NF := refl;


-- U-Quotient
--------------------------------------------------------------------------------

higher inductive Quot (A : U)(R : A → A → U) :=
    q-emb A
  | q-quot (x y : A) (R x y) (i : I) [i=0. q-emb x; i=1. q-emb y];

test14 (A : I → U)(R : (i : I) → A i → A i → U)
       (x y : A 0)(r : R 0 x y)(i : I) : Quot (A 1) (R 1) :=
  coe 0 1 (i. Quot (A i) (R i)) (q-quot x y r i);
-- OK (coherent)

test14NF (A : I → U)(R : (i : I) → A i → A i → U)
       (x y : A 0)(r : R 0 x y)(i : I) : Quot (A 1) (R 1) :=
q-quot (coe 0 1 A x) (coe 0 1 A y) (coe 0 1 (i. R i (coe 0 i A x) (coe 0 i A y)) r) i;

test14OK : test14 = test14NF := refl;

-- TODO: more precise coherence checking!
-- For example: applications to vars with closed inductive types are OK
-- How to do it more generally?

--------------------------------------------------------------------------------

higher inductive Coeq (A B : U) (f g : A → B) :=
    coeq-emb B
  | coeq-quot (a : A)(i : I)[i=0. coeq-emb (f a); i=1. coeq-emb (g a)];

test15 (A B : I → U)(f g : (i : I) → A i → B i)(a : A 0)(i : I) : Coeq (A 1) (B 1) (f 1) (g 1) :=
  coe 0 1 (i. Coeq (A i) (B i) (f i) (g i)) (coeq-quot a i);

test15NF (A B : I → U)(f g : (i : I) → A i → B i)(a : A 0)(i : I) : Coeq (A 1) (B 1) (f 1) (g 1) :=
hcom 1 0 (Coeq (A 1) (B 1) (f 1) (g 1)) [i = 0 i. coeq-emb (coe i 1 B (f i (coe
0 i A a))); i = 1 i. coeq-emb (coe i 1 B (g i (coe 0 i A a)))] (coeq-quot (coe 0
1 A a) i);

test15NFOK : test15 = test15NF := refl;
