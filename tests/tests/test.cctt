
import basics;
import nat;

inductive Bool := true | false;

iter (A : U)(f : A → A)(n : ℕ) (x : A) : A := case n [
  zero. x;
  suc n. iter A f n (f x)];


path := isoToPath Top Top (idIso Top);

comp2 := path ∙ path;
comp3 := path ∙ path ∙ path;
comp4 := path ∙ path ∙ path ∙ path;

bigpath :=
  path ∙ path ∙ path ∙
  path ∙ path ∙ path ∙
  path ∙ path ∙ path ∙
  path ∙ path ∙ path;


test := coe 0 1 bigpath tt;
-- test2 := coe 0 1 (path⁻¹⁻¹⁻¹⁻¹⁻¹⁻¹⁻¹⁻¹⁻¹⁻¹⁻¹) tt;

-- comp (A : U)(x y z : A)(p : x = y)(q : y = z) : x = z :=
--   λ i. hcom 0 1 A [i=0 _. x; i=1 j. q j] (p i);

-- compU (A B C : U)(p : A = B)(q : B = C) : A = C :=
--   λ i. hcom 0 1 U [i=0 _. A; i=1 j. q j] (p i);

-- -- Glue (p i) [i=0. A, coe 1 0 (_.A) isEquiv; i=1. C, coe 1 0 (j.q j) isEquiv]

-- funtest (x : Top) := coe 0 1 comp2 x;
