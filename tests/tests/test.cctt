
import basics;

inductive Bool := false | true;

falseNeqTrue : not (false = true) :=
  λ p. coe 0 1 (i. case (p i) [false. Top; true. Bot]) tt;

negBool : Bool → Bool := λ[false. true; true. false];

negIso : iso Bool Bool :=
    negBool
  , negBool
  , λ[false. refl; true. refl]
  , λ[false. refl; true. refl];

negPath : Bool = Bool := isoToPath Bool Bool negIso;

higher inductive S¹ :=
     base
   | loop (i : I) [i=0. base; i=1. base];

loop' : base = base := λ i. loop i;

F : S¹ → U := λ[
  base. Bool;
  loop i. negPath i];

test : Bool = Bool := λ i. F (loop i);

loopNeqRefl (p : loop' = refl) : Bot :=
  let lem1 : ap F loop' = refl := ap (λ q. ap F q) p;
  let lem2 : false = true := ap (λ p. coe 0 1 p true) lem1;
  falseNeqTrue lem2;