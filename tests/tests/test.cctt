
import basics;
import bool;

higher inductive S¹ :=
     base
   | loop (i : I) [i=0. base; i=1. base];

loop' : base = base := λ i. loop i;

test1 := base;

test2 (i : I) : S¹ := loop i;

test3 : loop 0 = base := refl;
test4 : loop 1 = base := refl;

f1 (x : S¹)(A : U)(p : A = A) : U := case x [
  base. A;
  loop i. p i];

F : S¹ → U := λ[
  base. Bool;
  loop i. negPath i];

loopNeqRefl (p : loop' = refl) : Bot :=
  let lem1 : ap F loop' = refl := λ i j. F (p i j);
  let lem2 : false = true := ap (λ (p : Bool = Bool). coe 0 1 p true) lem1;
  falseNeqTrue lem2;
