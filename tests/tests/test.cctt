
isLogEquiv (A B : U)(f : A → B) : U := (B → A);

isSection (A B : U)(f : A → B) : U := (g : B → A) × (linv : (x : A) → x = g (f x));

isRetraction (A B : U)(f : A → B) : U := (g : B → A) × (rinv : (x : B) → f (g x) = x);

isIso (A B : U)(f : A → B) : U :=
    (g    : B → A)
  × (linv : (x : A) → g (f x) = x)
  × (rinv : (x : B) → f (g x) = x);

isEquiv (A B : U)(f : A → B) : U :=
    (g    : B → A)
  × (linv : (x : A) → g (f x) = x)
  × (rinv : (x : B) → f (g x) = x)
  × (coh  : (x : A) → (rinv (f x)) ={i. f (linv x i) = f x} refl);

coeIsEquiv (A : I → U)(r r' : I) : isEquiv (A r) (A r') (λ x. coe r r' A x) :=
  let f'    (i : I)(x : A r)        : A i := coe r i A x;
  let g'    (i : I)(x : A i)        : A r := coe i r A x;
  let linv' (i : I)(x : A r)(j : I) : A r := hcom r i (A r) [j=0 k. coe k r A (coe r k A x); j=1 k. x] x;
  let rinv' (i : I)(x : A i)(j : I) : A i := hcom i r (A i) [j=0 k. coe k i A (coe i k A x); j=1 k. x] x;

  ( λ x. g' r' x
  , λ x j. linv' r' x j
  , λ x j. rinv' r' x j
  , λ x l k. com r r' A
          [k=0 i. f' i (linv' i x l)
          ;k=1 i. f' i x
		      ;l=0 i. rinv' i (f' i x) k
		      ;l=1 i. f' i x]
		      x
  );

equiv (A B : U) : U :=
  (f : A → B) × isEquiv A B f;

iso (A B : U) : U := (f : A → B) × isIso A B f;

idEquiv (A : U) : equiv A A :=
  (λ x. x, λ x. x, λ x _. x, λ x _. x, λ x _ _. x);

inductive List (A : U) := nil | cons A (List A);

foo (A B : U)(i : I) := Glue A [1 = 0. (B , idEquiv B)];

-- foo (A : U)(x y : A)(i : I) := hcom 0 1 [i = 0 _. x] y;

-- foo (A : U)(x y : A) (i : I) := Glue A [
