

--------------------------------------------------------------------------------

inductive Foo := R | G | B;
foo : Foo := G;

inductive ℕ := zero | suc ℕ;

czero (n : ℕ) : ℕ :=
  case n (_. ℕ) [
    zero. zero;
    suc n. czero n];

add : ℕ → ℕ → ℕ := λ[
  zero. λ x. x;
  suc n. λ x. suc (add n x)];

five := suc (suc (suc (suc (suc zero))));

ten := add five five;

mul (n m : ℕ) : ℕ :=
  case n [zero. zero; suc n. add m (mul n m)];

mul' : ℕ → ℕ → ℕ := λ[
  zero. λ _. zero;
  suc n. λ m. add m (mul' n m)];

n100 := mul ten ten;
n1k  := mul' ten n100;
n100k := mul n1k n100;
n10m := mul n100 n100k;

inductive Bool := true | false;

even : ℕ → Bool := λ[
  zero. true;
  suc n. case (even n) [true. false; false. true]];

testn1k   := even n1k;
testn100k := even n100k;
testn10m  := even n10m;

--------------------------------------------------------------------------------

inductive List (A : U) := nil | cons A (List A);

map (A B : U) (f : A → B)(as : List A) : List B :=
  case as (_. List B) [
    nil. nil;
    cons a as. cons (f a) (map A B f as)];

foldr (A B : U)(f : A → B → B)(b : B)(as : List A) : B :=
  case as [nil. b;
           cons a as. f a (foldr A B f b as)];

foldr' : (A B : U) → (A → B → B) → B → List A → B :=
  λ A B f b. λ[nil. b; cons a as. f a (foldr' A B f b as)];

list1 : List ℕ := cons ten (cons ten (cons ten nil));
list2 := map ℕ ℕ (λ _. zero) list1;

--------------------------------------------------------------------------------

-- No positivity check.
inductive Bad := mkBad (Bad → Bad);

inductive Top := tt;

inductive Bot :=;

-- makes more sense to just write "case p []" inline.
Bot-elim (A : U)(p : Bot) : A := case p [];

inductive W (A : U)(B : A → U) := sup (a : A)(f : B a → W A B);

inductive O := ozero | osuc O | olim (ℕ → O);

fromℕ : ℕ → O := λ[
  zero. ozero;
  suc n. osuc (fromℕ n)];

oten := fromℕ ten;

ω := olim fromℕ;

iter (A : U)(n : ℕ) (f : A → A) (a : A) : A := case n (_. A) [
  zero. a;
  suc n. f (iter A n f a)];

-- fast-growing function
fgf (o : O) (n : ℕ) : ℕ := case o [
  ozero . suc n;
  osuc o. iter ℕ n (fgf o) n;
  olim f. fgf (f n) n];

fω2 := fgf ω (suc (suc zero));

--------------------------------------------------------------------------------

-- non-uniform parameters are allowed
inductive Vec (A : U) (n : ℕ) :=
    vnil (n = zero)
  | vcons (m : ℕ) (n = suc m) A (Vec A m) ;

vmap (A B : U)(n : ℕ)(f : A → B)(as : Vec A n) : Vec B n :=
  case as (_. Vec B n) [
    vnil p. vnil p;
    vcons m p a as. vcons m p (f a) (vmap A B m f as)];

v1 : Vec ℕ (suc (suc zero)) :=
  vcons (suc zero) refl ten (vcons zero refl ten (vnil refl));

v2 := vmap ℕ ℕ (suc (suc zero)) (add ten) v1;


-- Recursive identities (will be needed in HITs)
--------------------------------------------------------------------------------

inductive RecId :=
    Base
  | Path (Base = Base); -- later constructors can refer to earlier ones

recid1 := Path refl⁻¹;

--------------------------------------------------------------------------------

not (A : U) := A → Bot;

inductive Sum (A B : U) := Left A | Right B;
Dec (A : U) := Sum A (not A);

the (A : U)(x : A) := x;

ℕ-Elim : (P : ℕ → U)(pz : P zero)(ps : (n : ℕ) → P n → P (suc n))(n : ℕ) → P n :=
  λ P pz ps. λ[
    zero. pz;
    suc n. ps n (ℕ-Elim P pz ps n)];

zeroNotSuc (n : ℕ)(p : zero = suc n) : Bot :=
  let f : ℕ → U := λ[zero. Top; suc _. Bot];
  coe 0 1 (ap f p) tt;

pred : ℕ → ℕ := λ[zero. zero; suc n. n];

ℕ-Dec : (n m : ℕ) → Dec (n = m) :=
  λ [zero.  λ [zero. Left refl;
               suc m. Right (zeroNotSuc m)];
     suc n. λ [zero. Right (λ p. zeroNotSuc n p⁻¹);
               suc m. case (ℕ-Dec n m) (_. Dec (suc n = suc m)) [
	          Left  p. Left (λ i. suc (p i));
		  Right p. Right (λ q. p (ap pred q))]]];

test := ℕ-Dec (suc zero) zero;

ℕ-DecNF : (n m : ℕ) → Dec (n = m) :=
λ n. case n (n. (m : ℕ) → Sum (n ={_. ℕ} m) (n ={_. ℕ} m → Bot)) [zero. λ
m. case m (m. Sum (zero ={_. ℕ} m) (zero ={_. ℕ} m → Bot)) [zero. Left (λ {zero}
{zero} _. zero); suc m. Right (λ p. coe 0 1 (i. case (p {zero} {suc m} i) (_. U)
[zero. Top; suc _. Bot]) tt)]; suc n. λ m. case m (m. Sum (suc n ={_. ℕ} m) (suc
n ={_. ℕ} m → Bot)) [zero. Right (λ p. coe 0 1 (i. case (hcom 0 1 ℕ [i = 0 j. p
{suc n} {zero} j; i = 1 _. suc n] (suc n)) (_. U) [zero. Top; suc _. Bot]) tt);
suc m. case (ℕ-Dec n m) (_. Sum (suc n ={_. ℕ} suc m) (suc n ={_. ℕ} suc m →
Bot)) [Left p. Left (λ {suc n} {suc m} i. suc (p {n} {m} i)); Right p. Right (λ
q. p (λ {n} {m} i. case (q {suc n} {suc m} i) (_. ℕ) [zero. zero; suc
n. n]))]]];

--------------------------------------------------------------------------------
